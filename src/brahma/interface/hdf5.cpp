
///
/// This file is generated by tools/generate_interfaces.py
/// Generated on: 2025-03-07 17:37:22
///

#include <brahma/interface/hdf5.h>

#include <stdexcept>
#ifdef BRAHMA_ENABLE_HDF5

namespace brahma {
std::shared_ptr<HDF5> HDF5::my_instance = nullptr;

std::shared_ptr<HDF5> HDF5::get_instance() {
  if (my_instance == nullptr) {
    BRAHMA_LOG_INFO("HDF5 class not intercepted but used", "");
    my_instance = std::make_shared<HDF5>();
  }
  return my_instance;
}

int HDF5::set_instance(std::shared_ptr<HDF5> instance_i) {
  if (instance_i != nullptr) {
    my_instance = instance_i;
    return 0;
  } else {
    BRAHMA_LOG_ERROR("%s instance_i is not set", "HDF5");
    throw std::runtime_error("instance_i is not set");
  }
}

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5open(void) {
  BRAHMA_UNWRAPPED_FUNC(H5open, herr_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5close(void) {
  BRAHMA_UNWRAPPED_FUNC(H5close, herr_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5dont_atexit(void) {
  BRAHMA_UNWRAPPED_FUNC(H5dont_atexit, herr_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5garbage_collect(void) {
  BRAHMA_UNWRAPPED_FUNC(H5garbage_collect, herr_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5set_free_list_limits(int reg_global_lim, int reg_list_lim,
                                    int arr_global_lim, int arr_list_lim,
                                    int blk_global_lim, int blk_list_lim) {
  BRAHMA_UNWRAPPED_FUNC(H5set_free_list_limits, herr_t,
                        (reg_global_lim, reg_list_lim, arr_global_lim,
                         arr_list_lim, blk_global_lim, blk_list_lim));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5get_libversion(unsigned int *majnum, unsigned int *minnum,
                              unsigned int *relnum) {
  BRAHMA_UNWRAPPED_FUNC(H5get_libversion, herr_t, (majnum, minnum, relnum));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5check_version(unsigned int majnum, unsigned int minnum,
                             unsigned int relnum) {
  BRAHMA_UNWRAPPED_FUNC(H5check_version, herr_t, (majnum, minnum, relnum));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5is_library_threadsafe(hbool_t *is_ts) {
  BRAHMA_UNWRAPPED_FUNC(H5is_library_threadsafe, herr_t, (is_ts));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5free_memory(void *mem) {
  BRAHMA_UNWRAPPED_FUNC(H5free_memory, herr_t, (mem));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5allocate_memory(size_t size, hbool_t clear) {
  BRAHMA_UNWRAPPED_FUNC(H5allocate_memory, void *, (size, clear));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5resize_memory(void *mem, size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5resize_memory, void *, (mem, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Iregister(H5I_type_t type, const void *object) {
  BRAHMA_UNWRAPPED_FUNC(H5Iregister, hid_t, (type, object));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5Iobject_verify(hid_t id, H5I_type_t type) {
  BRAHMA_UNWRAPPED_FUNC(H5Iobject_verify, void *, (id, type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5Iremove_verify(hid_t id, H5I_type_t type) {
  BRAHMA_UNWRAPPED_FUNC(H5Iremove_verify, void *, (id, type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5I_type_t HDF5::H5Iget_type(hid_t id) {
  BRAHMA_UNWRAPPED_FUNC(H5Iget_type, H5I_type_t, (id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Iget_file_id(hid_t id) {
  BRAHMA_UNWRAPPED_FUNC(H5Iget_file_id, hid_t, (id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Iget_name(hid_t id, char *name, size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Iget_name, ssize_t, (id, name, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Iinc_ref(hid_t id) {
  BRAHMA_UNWRAPPED_FUNC(H5Iinc_ref, int, (id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Idec_ref(hid_t id) {
  BRAHMA_UNWRAPPED_FUNC(H5Idec_ref, int, (id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Iget_ref(hid_t id) {
  BRAHMA_UNWRAPPED_FUNC(H5Iget_ref, int, (id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5I_type_t HDF5::H5Iregister_type(size_t hash_size, unsigned int reserved,
                                  H5I_free_t free_func) {
  BRAHMA_UNWRAPPED_FUNC(H5Iregister_type, H5I_type_t,
                        (hash_size, reserved, free_func));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Iclear_type(H5I_type_t type, hbool_t force) {
  BRAHMA_UNWRAPPED_FUNC(H5Iclear_type, herr_t, (type, force));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Idestroy_type(H5I_type_t type) {
  BRAHMA_UNWRAPPED_FUNC(H5Idestroy_type, herr_t, (type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Iinc_type_ref(H5I_type_t type) {
  BRAHMA_UNWRAPPED_FUNC(H5Iinc_type_ref, int, (type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Idec_type_ref(H5I_type_t type) {
  BRAHMA_UNWRAPPED_FUNC(H5Idec_type_ref, int, (type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Iget_type_ref(H5I_type_t type) {
  BRAHMA_UNWRAPPED_FUNC(H5Iget_type_ref, int, (type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5Isearch(H5I_type_t type, H5I_search_func_t func, void *key) {
  BRAHMA_UNWRAPPED_FUNC(H5Isearch, void *, (type, func, key));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Inmembers(H5I_type_t type, hsize_t *num_members) {
  BRAHMA_UNWRAPPED_FUNC(H5Inmembers, herr_t, (type, num_members));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Itype_exists(H5I_type_t type) {
  BRAHMA_UNWRAPPED_FUNC(H5Itype_exists, htri_t, (type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Iis_valid(hid_t id) {
  BRAHMA_UNWRAPPED_FUNC(H5Iis_valid, htri_t, (id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Tcreate(H5T_class_t type, size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Tcreate, hid_t, (type, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Tcopy(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tcopy, hid_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tclose(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tclose, herr_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Tequal(hid_t type1_id, hid_t type2_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tequal, htri_t, (type1_id, type2_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tlock(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tlock, herr_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tcommit2(hid_t loc_id, const char *name, hid_t type_id,
                        hid_t lcpl_id, hid_t tcpl_id, hid_t tapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tcommit2, herr_t,
                        (loc_id, name, type_id, lcpl_id, tcpl_id, tapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Topen2(hid_t loc_id, const char *name, hid_t tapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Topen2, hid_t, (loc_id, name, tapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tcommit_anon(hid_t loc_id, hid_t type_id, hid_t tcpl_id,
                            hid_t tapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tcommit_anon, herr_t,
                        (loc_id, type_id, tcpl_id, tapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Tget_create_plist(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_create_plist, hid_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Tcommitted(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tcommitted, htri_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tencode(hid_t obj_id, void *buf, size_t *nalloc) {
  BRAHMA_UNWRAPPED_FUNC(H5Tencode, herr_t, (obj_id, buf, nalloc));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Tdecode(const void *buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Tdecode, hid_t, (buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tinsert(hid_t parent_id, const char *name, size_t offset,
                       hid_t member_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tinsert, herr_t,
                        (parent_id, name, offset, member_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tpack(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tpack, herr_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Tenum_create(hid_t base_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tenum_create, hid_t, (base_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tenum_insert(hid_t type, const char *name, const void *value) {
  BRAHMA_UNWRAPPED_FUNC(H5Tenum_insert, herr_t, (type, name, value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tenum_nameof(hid_t type, const void *value, char *name,
                            size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Tenum_nameof, herr_t, (type, value, name, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tenum_valueof(hid_t type, const char *name, void *value) {
  BRAHMA_UNWRAPPED_FUNC(H5Tenum_valueof, herr_t, (type, name, value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Tvlen_create(hid_t base_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tvlen_create, hid_t, (base_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Tarray_create2(hid_t base_id, unsigned int ndims,
                             const hsize_t dim[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Tarray_create2, hid_t, (base_id, ndims, dim));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Tget_array_ndims(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_array_ndims, int, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Tget_array_dims2(hid_t type_id, hsize_t dims[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_array_dims2, int, (type_id, dims));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tset_tag(hid_t type, const char *tag) {
  BRAHMA_UNWRAPPED_FUNC(H5Tset_tag, herr_t, (type, tag));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
char *HDF5::H5Tget_tag(hid_t type) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_tag, char *, (type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Tget_super(hid_t type) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_super, hid_t, (type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5T_class_t HDF5::H5Tget_class(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_class, H5T_class_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Tdetect_class(hid_t type_id, H5T_class_t cls) {
  BRAHMA_UNWRAPPED_FUNC(H5Tdetect_class, htri_t, (type_id, cls));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
size_t HDF5::H5Tget_size(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_size, size_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5T_order_t HDF5::H5Tget_order(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_order, H5T_order_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
size_t HDF5::H5Tget_precision(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_precision, size_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Tget_offset(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_offset, int, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tget_pad(hid_t type_id, H5T_pad_t *lsb, H5T_pad_t *msb) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_pad, herr_t, (type_id, lsb, msb));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5T_sign_t HDF5::H5Tget_sign(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_sign, H5T_sign_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tget_fields(hid_t type_id, size_t *spos, size_t *epos,
                           size_t *esize, size_t *mpos, size_t *msize) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_fields, herr_t,
                        (type_id, spos, epos, esize, mpos, msize));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
size_t HDF5::H5Tget_ebias(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_ebias, size_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5T_norm_t HDF5::H5Tget_norm(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_norm, H5T_norm_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5T_pad_t HDF5::H5Tget_inpad(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_inpad, H5T_pad_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5T_str_t HDF5::H5Tget_strpad(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_strpad, H5T_str_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Tget_nmembers(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_nmembers, int, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
char *HDF5::H5Tget_member_name(hid_t type_id, unsigned int membno) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_member_name, char *, (type_id, membno));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Tget_member_index(hid_t type_id, const char *name) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_member_index, int, (type_id, name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
size_t HDF5::H5Tget_member_offset(hid_t type_id, unsigned int membno) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_member_offset, size_t, (type_id, membno));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5T_class_t HDF5::H5Tget_member_class(hid_t type_id, unsigned int membno) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_member_class, H5T_class_t, (type_id, membno));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Tget_member_type(hid_t type_id, unsigned int membno) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_member_type, hid_t, (type_id, membno));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tget_member_value(hid_t type_id, unsigned int membno,
                                 void *value) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_member_value, herr_t, (type_id, membno, value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5T_cset_t HDF5::H5Tget_cset(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_cset, H5T_cset_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Tis_variable_str(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tis_variable_str, htri_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Tget_native_type(hid_t type_id, H5T_direction_t direction) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_native_type, hid_t, (type_id, direction));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tset_size(hid_t type_id, size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Tset_size, herr_t, (type_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tset_order(hid_t type_id, H5T_order_t order) {
  BRAHMA_UNWRAPPED_FUNC(H5Tset_order, herr_t, (type_id, order));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tset_precision(hid_t type_id, size_t prec) {
  BRAHMA_UNWRAPPED_FUNC(H5Tset_precision, herr_t, (type_id, prec));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tset_offset(hid_t type_id, size_t offset) {
  BRAHMA_UNWRAPPED_FUNC(H5Tset_offset, herr_t, (type_id, offset));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tset_pad(hid_t type_id, H5T_pad_t lsb, H5T_pad_t msb) {
  BRAHMA_UNWRAPPED_FUNC(H5Tset_pad, herr_t, (type_id, lsb, msb));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tset_sign(hid_t type_id, H5T_sign_t sign) {
  BRAHMA_UNWRAPPED_FUNC(H5Tset_sign, herr_t, (type_id, sign));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tset_fields(hid_t type_id, size_t spos, size_t epos,
                           size_t esize, size_t mpos, size_t msize) {
  BRAHMA_UNWRAPPED_FUNC(H5Tset_fields, herr_t,
                        (type_id, spos, epos, esize, mpos, msize));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tset_ebias(hid_t type_id, size_t ebias) {
  BRAHMA_UNWRAPPED_FUNC(H5Tset_ebias, herr_t, (type_id, ebias));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tset_norm(hid_t type_id, H5T_norm_t norm) {
  BRAHMA_UNWRAPPED_FUNC(H5Tset_norm, herr_t, (type_id, norm));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tset_inpad(hid_t type_id, H5T_pad_t pad) {
  BRAHMA_UNWRAPPED_FUNC(H5Tset_inpad, herr_t, (type_id, pad));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tset_cset(hid_t type_id, H5T_cset_t cset) {
  BRAHMA_UNWRAPPED_FUNC(H5Tset_cset, herr_t, (type_id, cset));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tset_strpad(hid_t type_id, H5T_str_t strpad) {
  BRAHMA_UNWRAPPED_FUNC(H5Tset_strpad, herr_t, (type_id, strpad));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tregister(H5T_pers_t pers, const char *name, hid_t src_id,
                         hid_t dst_id, H5T_conv_t func) {
  BRAHMA_UNWRAPPED_FUNC(H5Tregister, herr_t,
                        (pers, name, src_id, dst_id, func));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tunregister(H5T_pers_t pers, const char *name, hid_t src_id,
                           hid_t dst_id, H5T_conv_t func) {
  BRAHMA_UNWRAPPED_FUNC(H5Tunregister, herr_t,
                        (pers, name, src_id, dst_id, func));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5T_conv_t HDF5::H5Tfind(hid_t src_id, hid_t dst_id, H5T_cdata_t **pcdata) {
  BRAHMA_UNWRAPPED_FUNC(H5Tfind, H5T_conv_t, (src_id, dst_id, pcdata));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Tcompiler_conv(hid_t src_id, hid_t dst_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tcompiler_conv, htri_t, (src_id, dst_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tconvert(hid_t src_id, hid_t dst_id, size_t nelmts, void *buf,
                        void *background, hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tconvert, herr_t,
                        (src_id, dst_id, nelmts, buf, background, plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tcommit1(hid_t loc_id, const char *name, hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tcommit1, herr_t, (loc_id, name, type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Topen1(hid_t loc_id, const char *name) {
  BRAHMA_UNWRAPPED_FUNC(H5Topen1, hid_t, (loc_id, name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Tarray_create1(hid_t base_id, int ndims, const hsize_t dim[],
                             const int perm[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Tarray_create1, hid_t, (base_id, ndims, dim, perm));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Tget_array_dims1(hid_t type_id, hsize_t dims[], int perm[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Tget_array_dims1, int, (type_id, dims, perm));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lmove(hid_t src_loc, const char *src_name, hid_t dst_loc,
                     const char *dst_name, hid_t lcpl_id, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lmove, herr_t,
      (src_loc, src_name, dst_loc, dst_name, lcpl_id, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lcopy(hid_t src_loc, const char *src_name, hid_t dst_loc,
                     const char *dst_name, hid_t lcpl_id, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lcopy, herr_t,
      (src_loc, src_name, dst_loc, dst_name, lcpl_id, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lcreate_hard(hid_t cur_loc, const char *cur_name, hid_t dst_loc,
                            const char *dst_name, hid_t lcpl_id,
                            hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lcreate_hard, herr_t,
      (cur_loc, cur_name, dst_loc, dst_name, lcpl_id, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lcreate_soft(const char *link_target, hid_t link_loc_id,
                            const char *link_name, hid_t lcpl_id,
                            hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lcreate_soft, herr_t,
      (link_target, link_loc_id, link_name, lcpl_id, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Ldelete(hid_t loc_id, const char *name, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Ldelete, herr_t, (loc_id, name, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Ldelete_by_idx(hid_t loc_id, const char *group_name,
                              H5_index_t idx_type, H5_iter_order_t order,
                              hsize_t n, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Ldelete_by_idx, herr_t,
                        (loc_id, group_name, idx_type, order, n, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lget_val(hid_t loc_id, const char *name, void *buf, size_t size,
                        hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Lget_val, herr_t, (loc_id, name, buf, size, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lget_val_by_idx(hid_t loc_id, const char *group_name,
                               H5_index_t idx_type, H5_iter_order_t order,
                               hsize_t n, void *buf, size_t size,
                               hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lget_val_by_idx, herr_t,
      (loc_id, group_name, idx_type, order, n, buf, size, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Lexists(hid_t loc_id, const char *name, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Lexists, htri_t, (loc_id, name, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Lget_info(hid_t loc_id, const char *name, H5L_info_t *linfo,
                         hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Lget_info, herr_t, (loc_id, name, linfo, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Lget_info_by_idx(hid_t loc_id, const char *group_name,
                                H5_index_t idx_type, H5_iter_order_t order,
                                hsize_t n, H5L_info_t *linfo, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lget_info_by_idx, herr_t,
      (loc_id, group_name, idx_type, order, n, linfo, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Lget_name_by_idx(hid_t loc_id, const char *group_name,
                                 H5_index_t idx_type, H5_iter_order_t order,
                                 hsize_t n, char *name, size_t size,
                                 hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lget_name_by_idx, ssize_t,
      (loc_id, group_name, idx_type, order, n, name, size, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Literate(hid_t grp_id, H5_index_t idx_type,
                        H5_iter_order_t order, hsize_t *idx, H5L_iterate_t op,
                        void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Literate, herr_t,
                        (grp_id, idx_type, order, idx, op, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Literate_by_name(hid_t loc_id, const char *group_name,
                                H5_index_t idx_type, H5_iter_order_t order,
                                hsize_t *idx, H5L_iterate_t op, void *op_data,
                                hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Literate_by_name, herr_t,
      (loc_id, group_name, idx_type, order, idx, op, op_data, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Lvisit(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order,
                      H5L_iterate_t op, void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Lvisit, herr_t,
                        (grp_id, idx_type, order, op, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Lvisit_by_name(hid_t loc_id, const char *group_name,
                              H5_index_t idx_type, H5_iter_order_t order,
                              H5L_iterate_t op, void *op_data, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lvisit_by_name, herr_t,
      (loc_id, group_name, idx_type, order, op, op_data, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lcreate_ud(hid_t link_loc_id, const char *link_name,
                          H5L_type_t link_type, const void *udata,
                          size_t udata_size, hid_t lcpl_id, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lcreate_ud, herr_t,
      (link_loc_id, link_name, link_type, udata, udata_size, lcpl_id, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lregister(const H5L_class_t *cls) {
  BRAHMA_UNWRAPPED_FUNC(H5Lregister, herr_t, (cls));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lunregister(H5L_type_t id) {
  BRAHMA_UNWRAPPED_FUNC(H5Lunregister, herr_t, (id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Lis_registered(H5L_type_t id) {
  BRAHMA_UNWRAPPED_FUNC(H5Lis_registered, htri_t, (id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lunpack_elink_val(const void *ext_linkval, size_t link_size,
                                 unsigned int *flags, const char **filename,
                                 const char **obj_path) {
  BRAHMA_UNWRAPPED_FUNC(H5Lunpack_elink_val, herr_t,
                        (ext_linkval, link_size, flags, filename, obj_path));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lcreate_external(const char *file_name, const char *obj_name,
                                hid_t link_loc_id, const char *link_name,
                                hid_t lcpl_id, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lcreate_external, herr_t,
      (file_name, obj_name, link_loc_id, link_name, lcpl_id, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Oopen(hid_t loc_id, const char *name, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oopen, hid_t, (loc_id, name, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Oopen_by_addr(hid_t loc_id, haddr_t addr) {
  BRAHMA_UNWRAPPED_FUNC(H5Oopen_by_addr, hid_t, (loc_id, addr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Oopen_by_idx(hid_t loc_id, const char *group_name,
                           H5_index_t idx_type, H5_iter_order_t order,
                           hsize_t n, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oopen_by_idx, hid_t,
                        (loc_id, group_name, idx_type, order, n, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Oexists_by_name(hid_t loc_id, const char *name, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oexists_by_name, htri_t, (loc_id, name, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Oget_info(hid_t loc_id, H5O_info_t *oinfo) {
  BRAHMA_UNWRAPPED_FUNC(H5Oget_info, herr_t, (loc_id, oinfo));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Oget_info_by_name(hid_t loc_id, const char *name,
                                 H5O_info_t *oinfo, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oget_info_by_name, herr_t,
                        (loc_id, name, oinfo, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Oget_info_by_idx(hid_t loc_id, const char *group_name,
                                H5_index_t idx_type, H5_iter_order_t order,
                                hsize_t n, H5O_info_t *oinfo, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Oget_info_by_idx, herr_t,
      (loc_id, group_name, idx_type, order, n, oinfo, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Olink(hid_t obj_id, hid_t new_loc_id, const char *new_name,
                     hid_t lcpl_id, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Olink, herr_t,
                        (obj_id, new_loc_id, new_name, lcpl_id, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oincr_refcount(hid_t object_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oincr_refcount, herr_t, (object_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Odecr_refcount(hid_t object_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Odecr_refcount, herr_t, (object_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Ocopy(hid_t src_loc_id, const char *src_name, hid_t dst_loc_id,
                     const char *dst_name, hid_t ocpypl_id, hid_t lcpl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Ocopy, herr_t,
      (src_loc_id, src_name, dst_loc_id, dst_name, ocpypl_id, lcpl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oset_comment(hid_t obj_id, const char *comment) {
  BRAHMA_UNWRAPPED_FUNC(H5Oset_comment, herr_t, (obj_id, comment));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oset_comment_by_name(hid_t loc_id, const char *name,
                                    const char *comment, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oset_comment_by_name, herr_t,
                        (loc_id, name, comment, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Oget_comment(hid_t obj_id, char *comment, size_t bufsize) {
  BRAHMA_UNWRAPPED_FUNC(H5Oget_comment, ssize_t, (obj_id, comment, bufsize));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Oget_comment_by_name(hid_t loc_id, const char *name,
                                     char *comment, size_t bufsize,
                                     hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oget_comment_by_name, ssize_t,
                        (loc_id, name, comment, bufsize, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Ovisit(hid_t obj_id, H5_index_t idx_type, H5_iter_order_t order,
                      H5O_iterate_t op, void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Ovisit, herr_t,
                        (obj_id, idx_type, order, op, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Ovisit_by_name(hid_t loc_id, const char *obj_name,
                              H5_index_t idx_type, H5_iter_order_t order,
                              H5O_iterate_t op, void *op_data, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Ovisit_by_name, herr_t,
      (loc_id, obj_name, idx_type, order, op, op_data, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oclose(hid_t object_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oclose, herr_t, (object_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Aclose(hid_t attr_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aclose, herr_t, (attr_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Acreate2(hid_t loc_id, const char *attr_name, hid_t type_id,
                       hid_t space_id, hid_t acpl_id, hid_t aapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Acreate2, hid_t,
      (loc_id, attr_name, type_id, space_id, acpl_id, aapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Acreate_by_name(hid_t loc_id, const char *obj_name,
                              const char *attr_name, hid_t type_id,
                              hid_t space_id, hid_t acpl_id, hid_t aapl_id,
                              hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Acreate_by_name, hid_t,
                        (loc_id, obj_name, attr_name, type_id, space_id,
                         acpl_id, aapl_id, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Adelete(hid_t loc_id, const char *attr_name) {
  BRAHMA_UNWRAPPED_FUNC(H5Adelete, herr_t, (loc_id, attr_name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Adelete_by_idx(hid_t loc_id, const char *obj_name,
                              H5_index_t idx_type, H5_iter_order_t order,
                              hsize_t n, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Adelete_by_idx, herr_t,
                        (loc_id, obj_name, idx_type, order, n, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Adelete_by_name(hid_t loc_id, const char *obj_name,
                               const char *attr_name, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Adelete_by_name, herr_t,
                        (loc_id, obj_name, attr_name, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Aexists(hid_t obj_id, const char *attr_name) {
  BRAHMA_UNWRAPPED_FUNC(H5Aexists, htri_t, (obj_id, attr_name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Aexists_by_name(hid_t obj_id, const char *obj_name,
                               const char *attr_name, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aexists_by_name, htri_t,
                        (obj_id, obj_name, attr_name, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Aget_create_plist(hid_t attr_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aget_create_plist, hid_t, (attr_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Aget_info(hid_t attr_id, H5A_info_t *ainfo) {
  BRAHMA_UNWRAPPED_FUNC(H5Aget_info, herr_t, (attr_id, ainfo));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Aget_info_by_idx(hid_t loc_id, const char *obj_name,
                                H5_index_t idx_type, H5_iter_order_t order,
                                hsize_t n, H5A_info_t *ainfo, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aget_info_by_idx, herr_t,
                        (loc_id, obj_name, idx_type, order, n, ainfo, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Aget_info_by_name(hid_t loc_id, const char *obj_name,
                                 const char *attr_name, H5A_info_t *ainfo,
                                 hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aget_info_by_name, herr_t,
                        (loc_id, obj_name, attr_name, ainfo, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Aget_name(hid_t attr_id, size_t buf_size, char *buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Aget_name, ssize_t, (attr_id, buf_size, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Aget_name_by_idx(hid_t loc_id, const char *obj_name,
                                 H5_index_t idx_type, H5_iter_order_t order,
                                 hsize_t n, char *name, size_t size,
                                 hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Aget_name_by_idx, ssize_t,
      (loc_id, obj_name, idx_type, order, n, name, size, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Aget_space(hid_t attr_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aget_space, hid_t, (attr_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hsize_t HDF5::H5Aget_storage_size(hid_t attr_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aget_storage_size, hsize_t, (attr_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Aget_type(hid_t attr_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aget_type, hid_t, (attr_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Aiterate2(hid_t loc_id, H5_index_t idx_type,
                         H5_iter_order_t order, hsize_t *idx,
                         H5A_operator2_t op, void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Aiterate2, herr_t,
                        (loc_id, idx_type, order, idx, op, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Aiterate_by_name(hid_t loc_id, const char *obj_name,
                                H5_index_t idx_type, H5_iter_order_t order,
                                hsize_t *idx, H5A_operator2_t op, void *op_data,
                                hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Aiterate_by_name, herr_t,
      (loc_id, obj_name, idx_type, order, idx, op, op_data, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Aopen(hid_t obj_id, const char *attr_name, hid_t aapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aopen, hid_t, (obj_id, attr_name, aapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Aopen_by_idx(hid_t loc_id, const char *obj_name,
                           H5_index_t idx_type, H5_iter_order_t order,
                           hsize_t n, hid_t aapl_id, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Aopen_by_idx, hid_t,
      (loc_id, obj_name, idx_type, order, n, aapl_id, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Aopen_by_name(hid_t loc_id, const char *obj_name,
                            const char *attr_name, hid_t aapl_id,
                            hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aopen_by_name, hid_t,
                        (loc_id, obj_name, attr_name, aapl_id, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Aread(hid_t attr_id, hid_t type_id, void *buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Aread, herr_t, (attr_id, type_id, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Arename(hid_t loc_id, const char *old_name,
                       const char *new_name) {
  BRAHMA_UNWRAPPED_FUNC(H5Arename, herr_t, (loc_id, old_name, new_name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Awrite(hid_t attr_id, hid_t type_id, const void *buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Awrite, herr_t, (attr_id, type_id, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Arename_by_name(hid_t loc_id, const char *obj_name,
                               const char *old_attr_name,
                               const char *new_attr_name, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Arename_by_name, herr_t,
      (loc_id, obj_name, old_attr_name, new_attr_name, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Acreate1(hid_t loc_id, const char *name, hid_t type_id,
                       hid_t space_id, hid_t acpl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Acreate1, hid_t,
                        (loc_id, name, type_id, space_id, acpl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Aget_num_attrs(hid_t loc_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aget_num_attrs, int, (loc_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Aiterate1(hid_t loc_id, unsigned int *idx, H5A_operator1_t op,
                         void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Aiterate1, herr_t, (loc_id, idx, op, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Aopen_idx(hid_t loc_id, unsigned int idx) {
  BRAHMA_UNWRAPPED_FUNC(H5Aopen_idx, hid_t, (loc_id, idx));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Aopen_name(hid_t loc_id, const char *name) {
  BRAHMA_UNWRAPPED_FUNC(H5Aopen_name, hid_t, (loc_id, name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Dcreate2(hid_t loc_id, const char *name, hid_t type_id,
                       hid_t space_id, hid_t lcpl_id, hid_t dcpl_id,
                       hid_t dapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Dcreate2, hid_t,
      (loc_id, name, type_id, space_id, lcpl_id, dcpl_id, dapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Dcreate_anon(hid_t loc_id, hid_t type_id, hid_t space_id,
                           hid_t dcpl_id, hid_t dapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dcreate_anon, hid_t,
                        (loc_id, type_id, space_id, dcpl_id, dapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Dopen2(hid_t loc_id, const char *name, hid_t dapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dopen2, hid_t, (loc_id, name, dapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Dget_space(hid_t dset_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dget_space, hid_t, (dset_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dget_space_status(hid_t dset_id,
                                 H5D_space_status_t *allocation) {
  BRAHMA_UNWRAPPED_FUNC(H5Dget_space_status, herr_t, (dset_id, allocation));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Dget_type(hid_t dset_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dget_type, hid_t, (dset_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Dget_create_plist(hid_t dset_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dget_create_plist, hid_t, (dset_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Dget_access_plist(hid_t dset_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dget_access_plist, hid_t, (dset_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hsize_t HDF5::H5Dget_storage_size(hid_t dset_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dget_storage_size, hsize_t, (dset_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dget_chunk_storage_size(hid_t dset_id, const hsize_t *offset,
                                       hsize_t *chunk_bytes) {
  BRAHMA_UNWRAPPED_FUNC(H5Dget_chunk_storage_size, herr_t,
                        (dset_id, offset, chunk_bytes));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
haddr_t HDF5::H5Dget_offset(hid_t dset_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dget_offset, haddr_t, (dset_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dread(hid_t dset_id, hid_t mem_type_id, hid_t mem_space_id,
                     hid_t file_space_id, hid_t dxpl_id, void *buf) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Dread, herr_t,
      (dset_id, mem_type_id, mem_space_id, file_space_id, dxpl_id, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dwrite(hid_t dset_id, hid_t mem_type_id, hid_t mem_space_id,
                      hid_t file_space_id, hid_t dxpl_id, const void *buf) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Dwrite, herr_t,
      (dset_id, mem_type_id, mem_space_id, file_space_id, dxpl_id, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Diterate(void *buf, hid_t type_id, hid_t space_id,
                        H5D_operator_t op, void *operator_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Diterate, herr_t,
                        (buf, type_id, space_id, op, operator_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dvlen_reclaim(hid_t type_id, hid_t space_id, hid_t dxpl_id,
                             void *buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Dvlen_reclaim, herr_t,
                        (type_id, space_id, dxpl_id, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dvlen_get_buf_size(hid_t dset_id, hid_t type_id, hid_t space_id,
                                  hsize_t *size) {
  BRAHMA_UNWRAPPED_FUNC(H5Dvlen_get_buf_size, herr_t,
                        (dset_id, type_id, space_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dfill(const void *fill, hid_t fill_type_id, void *buf,
                     hid_t buf_type_id, hid_t space_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dfill, herr_t,
                        (fill, fill_type_id, buf, buf_type_id, space_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dset_extent(hid_t dset_id, const hsize_t size[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Dset_extent, herr_t, (dset_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dscatter(H5D_scatter_func_t op, void *op_data, hid_t type_id,
                        hid_t dst_space_id, void *dst_buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Dscatter, herr_t,
                        (op, op_data, type_id, dst_space_id, dst_buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dgather(hid_t src_space_id, const void *src_buf, hid_t type_id,
                       size_t dst_buf_size, void *dst_buf, H5D_gather_func_t op,
                       void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Dgather, herr_t,
      (src_space_id, src_buf, type_id, dst_buf_size, dst_buf, op, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dclose(hid_t dset_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dclose, herr_t, (dset_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Ddebug(hid_t dset_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Ddebug, herr_t, (dset_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Dcreate1(hid_t loc_id, const char *name, hid_t type_id,
                       hid_t space_id, hid_t dcpl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dcreate1, hid_t,
                        (loc_id, name, type_id, space_id, dcpl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Dopen1(hid_t loc_id, const char *name) {
  BRAHMA_UNWRAPPED_FUNC(H5Dopen1, hid_t, (loc_id, name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dextend(hid_t dset_id, const hsize_t size[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Dextend, herr_t, (dset_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Eregister_class(const char *cls_name, const char *lib_name,
                              const char *version) {
  BRAHMA_UNWRAPPED_FUNC(H5Eregister_class, hid_t,
                        (cls_name, lib_name, version));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Eunregister_class(hid_t class_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Eunregister_class, herr_t, (class_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Eclose_msg(hid_t err_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Eclose_msg, herr_t, (err_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Ecreate_msg(hid_t cls, H5E_type_t msg_type, const char *msg) {
  BRAHMA_UNWRAPPED_FUNC(H5Ecreate_msg, hid_t, (cls, msg_type, msg));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Ecreate_stack(void) {
  BRAHMA_UNWRAPPED_FUNC(H5Ecreate_stack, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Eget_current_stack(void) {
  BRAHMA_UNWRAPPED_FUNC(H5Eget_current_stack, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Eclose_stack(hid_t stack_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Eclose_stack, herr_t, (stack_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Eget_class_name(hid_t class_id, char *name, size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Eget_class_name, ssize_t, (class_id, name, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Eset_current_stack(hid_t err_stack_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Eset_current_stack, herr_t, (err_stack_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Epush2(hid_t err_stack, const char *file, const char *func,
                      unsigned int line, hid_t cls_id, hid_t maj_id,
                      hid_t min_id, const char *msg) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Epush2, herr_t,
      (err_stack, file, func, line, cls_id, maj_id, min_id, msg));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Epop(hid_t err_stack, size_t count) {
  BRAHMA_UNWRAPPED_FUNC(H5Epop, herr_t, (err_stack, count));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Eprint2(hid_t err_stack, FILE *stream) {
  BRAHMA_UNWRAPPED_FUNC(H5Eprint2, herr_t, (err_stack, stream));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Ewalk2(hid_t err_stack, H5E_direction_t direction,
                      H5E_walk2_t func, void *client_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Ewalk2, herr_t,
                        (err_stack, direction, func, client_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Eget_auto2(hid_t estack_id, H5E_auto2_t *func,
                          void **client_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Eget_auto2, herr_t, (estack_id, func, client_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Eset_auto2(hid_t estack_id, H5E_auto2_t func,
                          void *client_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Eset_auto2, herr_t, (estack_id, func, client_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Eclear2(hid_t err_stack) {
  BRAHMA_UNWRAPPED_FUNC(H5Eclear2, herr_t, (err_stack));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Eauto_is_v2(hid_t err_stack, unsigned int *is_stack) {
  BRAHMA_UNWRAPPED_FUNC(H5Eauto_is_v2, herr_t, (err_stack, is_stack));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Eget_msg(hid_t msg_id, H5E_type_t *type, char *msg,
                         size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Eget_msg, ssize_t, (msg_id, type, msg, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Eget_num(hid_t error_stack_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Eget_num, ssize_t, (error_stack_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Eclear1(void) {
  BRAHMA_UNWRAPPED_FUNC(H5Eclear1, herr_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Eget_auto1(H5E_auto1_t *func, void **client_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Eget_auto1, herr_t, (func, client_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Epush1(const char *file, const char *func, unsigned int line,
                      H5E_major_t maj, H5E_minor_t min, const char *str) {
  BRAHMA_UNWRAPPED_FUNC(H5Epush1, herr_t, (file, func, line, maj, min, str));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Eprint1(FILE *stream) {
  BRAHMA_UNWRAPPED_FUNC(H5Eprint1, herr_t, (stream));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Eset_auto1(H5E_auto1_t func, void *client_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Eset_auto1, herr_t, (func, client_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Ewalk1(H5E_direction_t direction, H5E_walk1_t func,
                      void *client_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Ewalk1, herr_t, (direction, func, client_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
char *HDF5::H5Eget_major(H5E_major_t maj) {
  BRAHMA_UNWRAPPED_FUNC(H5Eget_major, char *, (maj));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
char *HDF5::H5Eget_minor(H5E_minor_t min) {
  BRAHMA_UNWRAPPED_FUNC(H5Eget_minor, char *, (min));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
htri_t HDF5::H5Fis_hdf5(const char *filename) {
  BRAHMA_UNWRAPPED_FUNC(H5Fis_hdf5, htri_t, (filename));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Fcreate(const char *filename, unsigned int flags, hid_t fcpl_id,
                      hid_t fapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Fcreate, hid_t, (filename, flags, fcpl_id, fapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Fopen(const char *filename, unsigned int flags, hid_t fapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Fopen, hid_t, (filename, flags, fapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Freopen(hid_t file_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Freopen, hid_t, (file_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fflush(hid_t object_id, H5F_scope_t scope) {
  BRAHMA_UNWRAPPED_FUNC(H5Fflush, herr_t, (object_id, scope));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fclose(hid_t file_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Fclose, herr_t, (file_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Fget_create_plist(hid_t file_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_create_plist, hid_t, (file_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Fget_access_plist(hid_t file_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_access_plist, hid_t, (file_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_intent(hid_t file_id, unsigned int *intent) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_intent, herr_t, (file_id, intent));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Fget_obj_count(hid_t file_id, unsigned int types) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_obj_count, ssize_t, (file_id, types));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Fget_obj_ids(hid_t file_id, unsigned int types, size_t max_objs,
                             hid_t *obj_id_list) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_obj_ids, ssize_t,
                        (file_id, types, max_objs, obj_id_list));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_vfd_handle(hid_t file_id, hid_t fapl, void **file_handle) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_vfd_handle, herr_t,
                        (file_id, fapl, file_handle));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fmount(hid_t loc, const char *name, hid_t child, hid_t plist) {
  BRAHMA_UNWRAPPED_FUNC(H5Fmount, herr_t, (loc, name, child, plist));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Funmount(hid_t loc, const char *name) {
  BRAHMA_UNWRAPPED_FUNC(H5Funmount, herr_t, (loc, name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hssize_t HDF5::H5Fget_freespace(hid_t file_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_freespace, hssize_t, (file_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_filesize(hid_t file_id, hsize_t *size) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_filesize, herr_t, (file_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Fget_file_image(hid_t file_id, void *buf_ptr, size_t buf_len) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_file_image, ssize_t,
                        (file_id, buf_ptr, buf_len));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_mdc_config(hid_t file_id, H5AC_cache_config_t *config_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_mdc_config, herr_t, (file_id, config_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101200
herr_t HDF5::H5Fset_mdc_config(hid_t file_id, H5AC_cache_config_t *config_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Fset_mdc_config, herr_t, (file_id, config_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_mdc_hit_rate(hid_t file_id, double *hit_rate_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_mdc_hit_rate, herr_t, (file_id, hit_rate_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_mdc_size(hid_t file_id, size_t *max_size_ptr,
                             size_t *min_clean_size_ptr, size_t *cur_size_ptr,
                             int *cur_num_entries_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_mdc_size, herr_t,
                        (file_id, max_size_ptr, min_clean_size_ptr,
                         cur_size_ptr, cur_num_entries_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Freset_mdc_hit_rate_stats(hid_t file_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Freset_mdc_hit_rate_stats, herr_t, (file_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Fget_name(hid_t obj_id, char *name, size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_name, ssize_t, (obj_id, name, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Fget_info(hid_t obj_id, H5F_info_t *file_info) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_info, herr_t, (obj_id, file_info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fclear_elink_file_cache(hid_t file_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Fclear_elink_file_cache, herr_t, (file_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fset_mpi_atomicity(hid_t file_id, hbool_t flag) {
  BRAHMA_UNWRAPPED_FUNC(H5Fset_mpi_atomicity, herr_t, (file_id, flag));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_mpi_atomicity(hid_t file_id, hbool_t *flag) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_mpi_atomicity, herr_t, (file_id, flag));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5FDregister(const H5FD_class_t *cls) {
  BRAHMA_UNWRAPPED_FUNC(H5FDregister, hid_t, (cls));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5FDunregister(hid_t driver_id) {
  BRAHMA_UNWRAPPED_FUNC(H5FDunregister, herr_t, (driver_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5FD_t *HDF5::H5FDopen(const char *name, unsigned int flags, hid_t fapl_id,
                       haddr_t maxaddr) {
  BRAHMA_UNWRAPPED_FUNC(H5FDopen, H5FD_t *, (name, flags, fapl_id, maxaddr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5FDclose(H5FD_t *file) {
  BRAHMA_UNWRAPPED_FUNC(H5FDclose, herr_t, (file));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5FDcmp(const H5FD_t *f1, const H5FD_t *f2) {
  BRAHMA_UNWRAPPED_FUNC(H5FDcmp, int, (f1, f2));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5FDquery(const H5FD_t *f, unsigned long *flags) {
  BRAHMA_UNWRAPPED_FUNC(H5FDquery, int, (f, flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
haddr_t HDF5::H5FDalloc(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id,
                        hsize_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5FDalloc, haddr_t, (file, type, dxpl_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5FDfree(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id,
                      haddr_t addr, hsize_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5FDfree, herr_t, (file, type, dxpl_id, addr, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
haddr_t HDF5::H5FDget_eoa(H5FD_t *file, H5FD_mem_t type) {
  BRAHMA_UNWRAPPED_FUNC(H5FDget_eoa, haddr_t, (file, type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5FDset_eoa(H5FD_t *file, H5FD_mem_t type, haddr_t eoa) {
  BRAHMA_UNWRAPPED_FUNC(H5FDset_eoa, herr_t, (file, type, eoa));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
haddr_t HDF5::H5FDget_eof(H5FD_t *file) {
  BRAHMA_UNWRAPPED_FUNC(H5FDget_eof, haddr_t, (file));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5FDget_vfd_handle(H5FD_t *file, hid_t fapl, void **file_handle) {
  BRAHMA_UNWRAPPED_FUNC(H5FDget_vfd_handle, herr_t, (file, fapl, file_handle));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5FDread(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id,
                      haddr_t addr, size_t size, void *buf) {
  BRAHMA_UNWRAPPED_FUNC(H5FDread, herr_t,
                        (file, type, dxpl_id, addr, size, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5FDwrite(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id,
                       haddr_t addr, size_t size, const void *buf) {
  BRAHMA_UNWRAPPED_FUNC(H5FDwrite, herr_t,
                        (file, type, dxpl_id, addr, size, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5FDflush(H5FD_t *file, hid_t dxpl_id, unsigned int closing) {
  BRAHMA_UNWRAPPED_FUNC(H5FDflush, herr_t, (file, dxpl_id, closing));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5FDtruncate(H5FD_t *file, hid_t dxpl_id, hbool_t closing) {
  BRAHMA_UNWRAPPED_FUNC(H5FDtruncate, herr_t, (file, dxpl_id, closing));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5FDdriver_query(hid_t driver_id, unsigned long *flags) {
  BRAHMA_UNWRAPPED_FUNC(H5FDdriver_query, herr_t, (driver_id, flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Gcreate2(hid_t loc_id, const char *name, hid_t lcpl_id,
                       hid_t gcpl_id, hid_t gapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Gcreate2, hid_t,
                        (loc_id, name, lcpl_id, gcpl_id, gapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Gcreate_anon(hid_t loc_id, hid_t gcpl_id, hid_t gapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Gcreate_anon, hid_t, (loc_id, gcpl_id, gapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Gopen2(hid_t loc_id, const char *name, hid_t gapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Gopen2, hid_t, (loc_id, name, gapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Gget_create_plist(hid_t group_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Gget_create_plist, hid_t, (group_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Gget_info(hid_t loc_id, H5G_info_t *ginfo) {
  BRAHMA_UNWRAPPED_FUNC(H5Gget_info, herr_t, (loc_id, ginfo));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Gget_info_by_name(hid_t loc_id, const char *name,
                                 H5G_info_t *ginfo, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Gget_info_by_name, herr_t,
                        (loc_id, name, ginfo, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Gget_info_by_idx(hid_t loc_id, const char *group_name,
                                H5_index_t idx_type, H5_iter_order_t order,
                                hsize_t n, H5G_info_t *ginfo, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Gget_info_by_idx, herr_t,
      (loc_id, group_name, idx_type, order, n, ginfo, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Gflush(hid_t group_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Gflush, herr_t, (group_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Grefresh(hid_t group_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Grefresh, herr_t, (group_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Gclose(hid_t group_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Gclose, herr_t, (group_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Gcreate1(hid_t loc_id, const char *name, size_t size_hint) {
  BRAHMA_UNWRAPPED_FUNC(H5Gcreate1, hid_t, (loc_id, name, size_hint));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Gopen1(hid_t loc_id, const char *name) {
  BRAHMA_UNWRAPPED_FUNC(H5Gopen1, hid_t, (loc_id, name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Glink(hid_t cur_loc_id, H5L_type_t type, const char *cur_name,
                     const char *new_name) {
  BRAHMA_UNWRAPPED_FUNC(H5Glink, herr_t,
                        (cur_loc_id, type, cur_name, new_name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Glink2(hid_t cur_loc_id, const char *cur_name, H5L_type_t type,
                      hid_t new_loc_id, const char *new_name) {
  BRAHMA_UNWRAPPED_FUNC(H5Glink2, herr_t,
                        (cur_loc_id, cur_name, type, new_loc_id, new_name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Gmove(hid_t src_loc_id, const char *src_name,
                     const char *dst_name) {
  BRAHMA_UNWRAPPED_FUNC(H5Gmove, herr_t, (src_loc_id, src_name, dst_name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Gmove2(hid_t src_loc_id, const char *src_name, hid_t dst_loc_id,
                      const char *dst_name) {
  BRAHMA_UNWRAPPED_FUNC(H5Gmove2, herr_t,
                        (src_loc_id, src_name, dst_loc_id, dst_name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Gunlink(hid_t loc_id, const char *name) {
  BRAHMA_UNWRAPPED_FUNC(H5Gunlink, herr_t, (loc_id, name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Gget_linkval(hid_t loc_id, const char *name, size_t size,
                            char *buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Gget_linkval, herr_t, (loc_id, name, size, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Gset_comment(hid_t loc_id, const char *name,
                            const char *comment) {
  BRAHMA_UNWRAPPED_FUNC(H5Gset_comment, herr_t, (loc_id, name, comment));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Gget_comment(hid_t loc_id, const char *name, size_t bufsize,
                         char *buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Gget_comment, int, (loc_id, name, bufsize, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Giterate(hid_t loc_id, const char *name, int *idx,
                        H5G_iterate_t op, void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Giterate, herr_t, (loc_id, name, idx, op, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Gget_num_objs(hid_t loc_id, hsize_t *num_objs) {
  BRAHMA_UNWRAPPED_FUNC(H5Gget_num_objs, herr_t, (loc_id, num_objs));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Gget_objinfo(hid_t loc_id, const char *name, hbool_t follow_link,
                            H5G_stat_t *statbuf) {
  BRAHMA_UNWRAPPED_FUNC(H5Gget_objinfo, herr_t,
                        (loc_id, name, follow_link, statbuf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Gget_objname_by_idx(hid_t loc_id, hsize_t idx, char *name,
                                    size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Gget_objname_by_idx, ssize_t,
                        (loc_id, idx, name, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5G_obj_t HDF5::H5Gget_objtype_by_idx(hid_t loc_id, hsize_t idx) {
  BRAHMA_UNWRAPPED_FUNC(H5Gget_objtype_by_idx, H5G_obj_t, (loc_id, idx));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Zregister(const void *cls) {
  BRAHMA_UNWRAPPED_FUNC(H5Zregister, herr_t, (cls));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Zunregister(H5Z_filter_t id) {
  BRAHMA_UNWRAPPED_FUNC(H5Zunregister, herr_t, (id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Zfilter_avail(H5Z_filter_t id) {
  BRAHMA_UNWRAPPED_FUNC(H5Zfilter_avail, htri_t, (id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Zget_filter_info(H5Z_filter_t filter,
                                unsigned int *filter_config_flags) {
  BRAHMA_UNWRAPPED_FUNC(H5Zget_filter_info, herr_t,
                        (filter, filter_config_flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pclose(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pclose, herr_t, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pclose_class(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pclose_class, herr_t, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Pcopy(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pcopy, hid_t, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pcopy_prop(hid_t dst_id, hid_t src_id, const char *name) {
  BRAHMA_UNWRAPPED_FUNC(H5Pcopy_prop, herr_t, (dst_id, src_id, name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Pcreate(hid_t cls_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pcreate, hid_t, (cls_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Pcreate_class(hid_t parent, const char *name,
                            H5P_cls_create_func_t create, void *create_data,
                            H5P_cls_copy_func_t copy, void *copy_data,
                            H5P_cls_close_func_t close, void *close_data) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Pcreate_class, hid_t,
      (parent, name, create, create_data, copy, copy_data, close, close_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Pequal(hid_t id1, hid_t id2) {
  BRAHMA_UNWRAPPED_FUNC(H5Pequal, htri_t, (id1, id2));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Pexist(hid_t plist_id, const char *name) {
  BRAHMA_UNWRAPPED_FUNC(H5Pexist, htri_t, (plist_id, name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget(hid_t plist_id, const char *name, void *value) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget, herr_t, (plist_id, name, value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Pget_class(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_class, hid_t, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
char *HDF5::H5Pget_class_name(hid_t pclass_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_class_name, char *, (pclass_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Pget_class_parent(hid_t pclass_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_class_parent, hid_t, (pclass_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_nprops(hid_t id, size_t *nprops) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_nprops, herr_t, (id, nprops));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_size(hid_t id, const char *name, size_t *size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_size, herr_t, (id, name, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pinsert2(hid_t plist_id, const char *name, size_t size,
                        void *value, H5P_prp_set_func_t set,
                        H5P_prp_get_func_t get, H5P_prp_delete_func_t prp_del,
                        H5P_prp_copy_func_t copy,
                        H5P_prp_compare_func_t compare,
                        H5P_prp_close_func_t close) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Pinsert2, herr_t,
      (plist_id, name, size, value, set, get, prp_del, copy, compare, close));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Pisa_class(hid_t plist_id, hid_t pclass_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pisa_class, htri_t, (plist_id, pclass_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Piterate(hid_t id, int *idx, H5P_iterate_t iter_func,
                     void *iter_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Piterate, int, (id, idx, iter_func, iter_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pregister2(hid_t cls_id, const char *name, size_t size,
                          void *def_value, H5P_prp_create_func_t create,
                          H5P_prp_set_func_t set, H5P_prp_get_func_t get,
                          H5P_prp_delete_func_t prp_del,
                          H5P_prp_copy_func_t copy,
                          H5P_prp_compare_func_t compare,
                          H5P_prp_close_func_t close) {
  BRAHMA_UNWRAPPED_FUNC(H5Pregister2, herr_t,
                        (cls_id, name, size, def_value, create, set, get,
                         prp_del, copy, compare, close));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Premove(hid_t plist_id, const char *name) {
  BRAHMA_UNWRAPPED_FUNC(H5Premove, herr_t, (plist_id, name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Pset(hid_t plist_id, const char *name, void *value) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset, herr_t, (plist_id, name, value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Punregister(hid_t pclass_id, const char *name) {
  BRAHMA_UNWRAPPED_FUNC(H5Punregister, herr_t, (pclass_id, name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Pall_filters_avail(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pall_filters_avail, htri_t, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_attr_creation_order(hid_t plist_id,
                                        unsigned int *crt_order_flags) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_attr_creation_order, herr_t,
                        (plist_id, crt_order_flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_attr_phase_change(hid_t plist_id, unsigned int *max_compact,
                                      unsigned int *min_dense) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_attr_phase_change, herr_t,
                        (plist_id, max_compact, min_dense));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5Z_filter_t HDF5::H5Pget_filter2(hid_t plist_id, unsigned int idx,
                                  unsigned int *flags, size_t *cd_nelmts,
                                  unsigned int cd_values[], size_t namelen,
                                  char name[], unsigned int *filter_config) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_filter2, H5Z_filter_t,
                        (plist_id, idx, flags, cd_nelmts, cd_values, namelen,
                         name, filter_config));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_filter_by_id2(hid_t plist_id, H5Z_filter_t filter_id,
                                  unsigned int *flags, size_t *cd_nelmts,
                                  unsigned int cd_values[], size_t namelen,
                                  char name[], unsigned int *filter_config) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_filter_by_id2, herr_t,
                        (plist_id, filter_id, flags, cd_nelmts, cd_values,
                         namelen, name, filter_config));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Pget_nfilters(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_nfilters, int, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_obj_track_times(hid_t plist_id, hbool_t *track_times) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_obj_track_times, herr_t,
                        (plist_id, track_times));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pmodify_filter(hid_t plist_id, H5Z_filter_t filter,
                              unsigned int flags, size_t cd_nelmts,
                              const unsigned int cd_values[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Pmodify_filter, herr_t,
                        (plist_id, filter, flags, cd_nelmts, cd_values));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Premove_filter(hid_t plist_id, H5Z_filter_t filter) {
  BRAHMA_UNWRAPPED_FUNC(H5Premove_filter, herr_t, (plist_id, filter));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_attr_creation_order(hid_t plist_id,
                                        unsigned int crt_order_flags) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_attr_creation_order, herr_t,
                        (plist_id, crt_order_flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_attr_phase_change(hid_t plist_id, unsigned int max_compact,
                                      unsigned int min_dense) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_attr_phase_change, herr_t,
                        (plist_id, max_compact, min_dense));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_deflate(hid_t plist_id, unsigned int level) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_deflate, herr_t, (plist_id, level));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_filter(hid_t plist_id, H5Z_filter_t filter,
                           unsigned int flags, size_t cd_nelmts,
                           const unsigned int c_values[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_filter, herr_t,
                        (plist_id, filter, flags, cd_nelmts, c_values));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_fletcher32(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_fletcher32, herr_t, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_obj_track_times(hid_t plist_id, hbool_t track_times) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_obj_track_times, herr_t,
                        (plist_id, track_times));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_istore_k(hid_t plist_id, unsigned int *ik) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_istore_k, herr_t, (plist_id, ik));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_shared_mesg_index(hid_t plist_id, unsigned int index_num,
                                      unsigned int *mesg_type_flags,
                                      unsigned int *min_mesg_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_shared_mesg_index, herr_t,
                        (plist_id, index_num, mesg_type_flags, min_mesg_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_shared_mesg_nindexes(hid_t plist_id,
                                         unsigned int *nindexes) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_shared_mesg_nindexes, herr_t,
                        (plist_id, nindexes));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_shared_mesg_phase_change(hid_t plist_id,
                                             unsigned int *max_list,
                                             unsigned int *min_btree) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_shared_mesg_phase_change, herr_t,
                        (plist_id, max_list, min_btree));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_sizes(hid_t plist_id, size_t *sizeof_addr,
                          size_t *sizeof_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_sizes, herr_t,
                        (plist_id, sizeof_addr, sizeof_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_sym_k(hid_t plist_id, unsigned int *ik, unsigned int *lk) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_sym_k, herr_t, (plist_id, ik, lk));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_userblock(hid_t plist_id, hsize_t *size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_userblock, herr_t, (plist_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_version(hid_t plist_id, unsigned int *boot,
                            unsigned int *freelist, unsigned int *stab,
                            unsigned int *shhdr) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_version, herr_t,
                        (plist_id, boot, freelist, stab, shhdr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_istore_k(hid_t plist_id, unsigned int ik) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_istore_k, herr_t, (plist_id, ik));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_shared_mesg_index(hid_t plist_id, unsigned int index_num,
                                      unsigned int mesg_type_flags,
                                      unsigned int min_mesg_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_shared_mesg_index, herr_t,
                        (plist_id, index_num, mesg_type_flags, min_mesg_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_shared_mesg_nindexes(hid_t plist_id,
                                         unsigned int nindexes) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_shared_mesg_nindexes, herr_t,
                        (plist_id, nindexes));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_shared_mesg_phase_change(hid_t plist_id,
                                             unsigned int max_list,
                                             unsigned int min_btree) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_shared_mesg_phase_change, herr_t,
                        (plist_id, max_list, min_btree));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_sizes(hid_t plist_id, size_t sizeof_addr,
                          size_t sizeof_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_sizes, herr_t,
                        (plist_id, sizeof_addr, sizeof_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_sym_k(hid_t plist_id, unsigned int ik, unsigned int lk) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_sym_k, herr_t, (plist_id, ik, lk));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_userblock(hid_t plist_id, hsize_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_userblock, herr_t, (plist_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_alignment(hid_t fapl_id, hsize_t *threshold,
                              hsize_t *alignment) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_alignment, herr_t,
                        (fapl_id, threshold, alignment));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_cache(hid_t plist_id, int *mdc_nelmts, size_t *rdcc_nslots,
                          size_t *rdcc_nbytes, double *rdcc_w0) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Pget_cache, herr_t,
      (plist_id, mdc_nelmts, rdcc_nslots, rdcc_nbytes, rdcc_w0));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_core_write_tracking(hid_t fapl_id, hbool_t *is_enabled,
                                        size_t *page_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_core_write_tracking, herr_t,
                        (fapl_id, is_enabled, page_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Pget_driver(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_driver, hid_t, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
void *HDF5::H5Pget_driver_info(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_driver_info, void *, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_elink_file_cache_size(hid_t plist_id,
                                          unsigned int *efc_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_elink_file_cache_size, herr_t,
                        (plist_id, efc_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_family_offset(hid_t fapl_id, hsize_t *offset) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_family_offset, herr_t, (fapl_id, offset));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_fclose_degree(hid_t fapl_id, H5F_close_degree_t *degree) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_fclose_degree, herr_t, (fapl_id, degree));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_file_image(hid_t fapl_id, void **buf_ptr_ptr,
                               size_t *buf_len_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_file_image, herr_t,
                        (fapl_id, buf_ptr_ptr, buf_len_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_file_image_callbacks(
    hid_t fapl_id, H5FD_file_image_callbacks_t *callbacks_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_file_image_callbacks, herr_t,
                        (fapl_id, callbacks_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_gc_references(hid_t fapl_id, unsigned int *gc_ref) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_gc_references, herr_t, (fapl_id, gc_ref));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_libver_bounds(hid_t plist_id, H5F_libver_t *low,
                                  H5F_libver_t *high) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_libver_bounds, herr_t, (plist_id, low, high));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_mdc_config(hid_t plist_id,
                               H5AC_cache_config_t *config_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_mdc_config, herr_t, (plist_id, config_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_meta_block_size(hid_t fapl_id, hsize_t *size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_meta_block_size, herr_t, (fapl_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_multi_type(hid_t fapl_id, H5FD_mem_t *type) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_multi_type, herr_t, (fapl_id, type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_sieve_buf_size(hid_t fapl_id, size_t *size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_sieve_buf_size, herr_t, (fapl_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_small_data_block_size(hid_t fapl_id, hsize_t *size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_small_data_block_size, herr_t, (fapl_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_alignment(hid_t fapl_id, hsize_t threshold,
                              hsize_t alignment) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_alignment, herr_t,
                        (fapl_id, threshold, alignment));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_cache(hid_t plist_id, int mdc_nelmts, size_t rdcc_nslots,
                          size_t rdcc_nbytes, double rdcc_w0) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Pset_cache, herr_t,
      (plist_id, mdc_nelmts, rdcc_nslots, rdcc_nbytes, rdcc_w0));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_core_write_tracking(hid_t fapl_id, hbool_t is_enabled,
                                        size_t page_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_core_write_tracking, herr_t,
                        (fapl_id, is_enabled, page_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_driver(hid_t plist_id, hid_t driver_id,
                           const void *driver_info) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_driver, herr_t,
                        (plist_id, driver_id, driver_info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_elink_file_cache_size(hid_t plist_id,
                                          unsigned int efc_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_elink_file_cache_size, herr_t,
                        (plist_id, efc_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_family_offset(hid_t fapl_id, hsize_t offset) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_family_offset, herr_t, (fapl_id, offset));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_fclose_degree(hid_t fapl_id, H5F_close_degree_t degree) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_fclose_degree, herr_t, (fapl_id, degree));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_file_image(hid_t fapl_id, void *buf_ptr, size_t buf_len) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_file_image, herr_t, (fapl_id, buf_ptr, buf_len));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_file_image_callbacks(
    hid_t fapl_id, H5FD_file_image_callbacks_t *callbacks_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_file_image_callbacks, herr_t,
                        (fapl_id, callbacks_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_gc_references(hid_t fapl_id, unsigned int gc_ref) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_gc_references, herr_t, (fapl_id, gc_ref));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_libver_bounds(hid_t plist_id, H5F_libver_t low,
                                  H5F_libver_t high) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_libver_bounds, herr_t, (plist_id, low, high));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_mdc_config(hid_t plist_id,
                               H5AC_cache_config_t *config_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_mdc_config, herr_t, (plist_id, config_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_meta_block_size(hid_t fapl_id, hsize_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_meta_block_size, herr_t, (fapl_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_multi_type(hid_t fapl_id, H5FD_mem_t type) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_multi_type, herr_t, (fapl_id, type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_sieve_buf_size(hid_t fapl_id, size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_sieve_buf_size, herr_t, (fapl_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_small_data_block_size(hid_t fapl_id, hsize_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_small_data_block_size, herr_t, (fapl_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pfill_value_defined(hid_t plist, H5D_fill_value_t *status) {
  BRAHMA_UNWRAPPED_FUNC(H5Pfill_value_defined, herr_t, (plist, status));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_alloc_time(hid_t plist_id, H5D_alloc_time_t *alloc_time) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_alloc_time, herr_t, (plist_id, alloc_time));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Pget_chunk(hid_t plist_id, int max_ndims, hsize_t dim[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_chunk, int, (plist_id, max_ndims, dim));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_external(hid_t plist_id, unsigned int idx, size_t name_size,
                             char *name, off_t *offset, hsize_t *size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_external, herr_t,
                        (plist_id, idx, name_size, name, offset, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Pget_external_count(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_external_count, int, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_fill_time(hid_t plist_id, H5D_fill_time_t *fill_time) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_fill_time, herr_t, (plist_id, fill_time));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_fill_value(hid_t plist_id, hid_t type_id, void *value) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_fill_value, herr_t, (plist_id, type_id, value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5D_layout_t HDF5::H5Pget_layout(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_layout, H5D_layout_t, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_alloc_time(hid_t plist_id, H5D_alloc_time_t alloc_time) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_alloc_time, herr_t, (plist_id, alloc_time));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_chunk(hid_t plist_id, int ndims, const hsize_t dim[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_chunk, herr_t, (plist_id, ndims, dim));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_external(hid_t plist_id, const char *name, off_t offset,
                             hsize_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_external, herr_t,
                        (plist_id, name, offset, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_fill_time(hid_t plist_id, H5D_fill_time_t fill_time) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_fill_time, herr_t, (plist_id, fill_time));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_fill_value(hid_t plist_id, hid_t type_id,
                               const void *value) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_fill_value, herr_t, (plist_id, type_id, value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_shuffle(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_shuffle, herr_t, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_layout(hid_t plist_id, H5D_layout_t layout) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_layout, herr_t, (plist_id, layout));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_nbit(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_nbit, herr_t, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_scaleoffset(hid_t plist_id, H5Z_SO_scale_type_t scale_type,
                                int scale_factor) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_scaleoffset, herr_t,
                        (plist_id, scale_type, scale_factor));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_szip(hid_t plist_id, unsigned int options_mask,
                         unsigned int pixels_per_block) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_szip, herr_t,
                        (plist_id, options_mask, pixels_per_block));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_chunk_cache(hid_t dapl_id, size_t *rdcc_nslots,
                                size_t *rdcc_nbytes, double *rdcc_w0) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_chunk_cache, herr_t,
                        (dapl_id, rdcc_nslots, rdcc_nbytes, rdcc_w0));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Pget_efile_prefix(hid_t dapl_id, char *prefix, size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_efile_prefix, ssize_t, (dapl_id, prefix, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_chunk_cache(hid_t dapl_id, size_t rdcc_nslots,
                                size_t rdcc_nbytes, double rdcc_w0) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_chunk_cache, herr_t,
                        (dapl_id, rdcc_nslots, rdcc_nbytes, rdcc_w0));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_efile_prefix(hid_t dapl_id, const char *prefix) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_efile_prefix, herr_t, (dapl_id, prefix));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_btree_ratios(hid_t plist_id, double *left, double *middle,
                                 double *right) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_btree_ratios, herr_t,
                        (plist_id, left, middle, right));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
size_t HDF5::H5Pget_buffer(hid_t plist_id, void **tconv, void **bkg) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_buffer, size_t, (plist_id, tconv, bkg));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Pget_data_transform(hid_t plist_id, char *expression,
                                    size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_data_transform, ssize_t,
                        (plist_id, expression, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5Z_EDC_t HDF5::H5Pget_edc_check(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_edc_check, H5Z_EDC_t, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_hyper_vector_size(hid_t fapl_id, size_t *size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_hyper_vector_size, herr_t, (fapl_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Pget_preserve(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_preserve, int, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_type_conv_cb(hid_t dxpl_id, H5T_conv_except_func_t *op,
                                 void **operate_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_type_conv_cb, herr_t,
                        (dxpl_id, op, operate_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_vlen_mem_manager(hid_t plist_id,
                                     H5MM_allocate_t *alloc_func,
                                     void **alloc_info, H5MM_free_t *free_func,
                                     void **free_info) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Pget_vlen_mem_manager, herr_t,
      (plist_id, alloc_func, alloc_info, free_func, free_info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_btree_ratios(hid_t plist_id, double left, double middle,
                                 double right) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_btree_ratios, herr_t,
                        (plist_id, left, middle, right));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_buffer(hid_t plist_id, size_t size, void *tconv,
                           void *bkg) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_buffer, herr_t, (plist_id, size, tconv, bkg));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_data_transform(hid_t plist_id, const char *expression) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_data_transform, herr_t, (plist_id, expression));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_edc_check(hid_t plist_id, H5Z_EDC_t check) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_edc_check, herr_t, (plist_id, check));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_filter_callback(hid_t plist_id, H5Z_filter_func_t func,
                                    void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_filter_callback, herr_t,
                        (plist_id, func, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_hyper_vector_size(hid_t plist_id, size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_hyper_vector_size, herr_t, (plist_id, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_preserve(hid_t plist_id, hbool_t status) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_preserve, herr_t, (plist_id, status));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_type_conv_cb(hid_t dxpl_id, H5T_conv_except_func_t op,
                                 void *operate_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_type_conv_cb, herr_t,
                        (dxpl_id, op, operate_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_vlen_mem_manager(hid_t plist_id, H5MM_allocate_t alloc_func,
                                     void *alloc_info, H5MM_free_t free_func,
                                     void *free_info) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Pset_vlen_mem_manager, herr_t,
      (plist_id, alloc_func, alloc_info, free_func, free_info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_mpio_actual_chunk_opt_mode(
    hid_t plist_id, H5D_mpio_actual_chunk_opt_mode_t *actual_chunk_opt_mode) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_mpio_actual_chunk_opt_mode, herr_t,
                        (plist_id, actual_chunk_opt_mode));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_mpio_actual_io_mode(
    hid_t plist_id, H5D_mpio_actual_io_mode_t *actual_io_mode) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_mpio_actual_io_mode, herr_t,
                        (plist_id, actual_io_mode));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_mpio_no_collective_cause(
    hid_t plist_id, uint32_t *local_no_collective_cause,
    uint32_t *global_no_collective_cause) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Pget_mpio_no_collective_cause, herr_t,
      (plist_id, local_no_collective_cause, global_no_collective_cause));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_create_intermediate_group(hid_t plist_id,
                                              unsigned int *crt_intmd) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_create_intermediate_group, herr_t,
                        (plist_id, crt_intmd));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_create_intermediate_group(hid_t plist_id,
                                              unsigned int crt_intmd) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_create_intermediate_group, herr_t,
                        (plist_id, crt_intmd));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_est_link_info(hid_t plist_id, unsigned int *est_num_entries,
                                  unsigned int *est_name_len) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_est_link_info, herr_t,
                        (plist_id, est_num_entries, est_name_len));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_link_creation_order(hid_t plist_id,
                                        unsigned int *crt_order_flags) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_link_creation_order, herr_t,
                        (plist_id, crt_order_flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_link_phase_change(hid_t plist_id, unsigned int *max_compact,
                                      unsigned int *min_dense) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_link_phase_change, herr_t,
                        (plist_id, max_compact, min_dense));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_local_heap_size_hint(hid_t plist_id, size_t *size_hint) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_local_heap_size_hint, herr_t,
                        (plist_id, size_hint));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_est_link_info(hid_t plist_id, unsigned int est_num_entries,
                                  unsigned int est_name_len) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_est_link_info, herr_t,
                        (plist_id, est_num_entries, est_name_len));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_link_creation_order(hid_t plist_id,
                                        unsigned int crt_order_flags) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_link_creation_order, herr_t,
                        (plist_id, crt_order_flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_link_phase_change(hid_t plist_id, unsigned int max_compact,
                                      unsigned int min_dense) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_link_phase_change, herr_t,
                        (plist_id, max_compact, min_dense));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_local_heap_size_hint(hid_t plist_id, size_t size_hint) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_local_heap_size_hint, herr_t,
                        (plist_id, size_hint));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_char_encoding(hid_t plist_id, H5T_cset_t *encoding) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_char_encoding, herr_t, (plist_id, encoding));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_char_encoding(hid_t plist_id, H5T_cset_t encoding) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_char_encoding, herr_t, (plist_id, encoding));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_elink_acc_flags(hid_t lapl_id, unsigned int *flags) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_elink_acc_flags, herr_t, (lapl_id, flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_elink_cb(hid_t lapl_id, H5L_elink_traverse_t *func,
                             void **op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_elink_cb, herr_t, (lapl_id, func, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Pget_elink_fapl(hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_elink_fapl, hid_t, (lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Pget_elink_prefix(hid_t plist_id, char *prefix, size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_elink_prefix, ssize_t, (plist_id, prefix, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_nlinks(hid_t plist_id, size_t *nlinks) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_nlinks, herr_t, (plist_id, nlinks));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_elink_acc_flags(hid_t lapl_id, unsigned int flags) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_elink_acc_flags, herr_t, (lapl_id, flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_elink_cb(hid_t lapl_id, H5L_elink_traverse_t func,
                             void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_elink_cb, herr_t, (lapl_id, func, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_elink_fapl(hid_t lapl_id, hid_t fapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_elink_fapl, herr_t, (lapl_id, fapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_elink_prefix(hid_t plist_id, const char *prefix) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_elink_prefix, herr_t, (plist_id, prefix));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_nlinks(hid_t plist_id, size_t nlinks) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_nlinks, herr_t, (plist_id, nlinks));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Padd_merge_committed_dtype_path(hid_t plist_id,
                                               const char *path) {
  BRAHMA_UNWRAPPED_FUNC(H5Padd_merge_committed_dtype_path, herr_t,
                        (plist_id, path));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pfree_merge_committed_dtype_paths(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pfree_merge_committed_dtype_paths, herr_t,
                        (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_copy_object(hid_t plist_id, unsigned int *copy_options) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_copy_object, herr_t, (plist_id, copy_options));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_mcdt_search_cb(hid_t plist_id, H5O_mcdt_search_cb_t *func,
                                   void **op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_mcdt_search_cb, herr_t,
                        (plist_id, func, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_copy_object(hid_t plist_id, unsigned int copy_options) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_copy_object, herr_t, (plist_id, copy_options));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_mcdt_search_cb(hid_t plist_id, H5O_mcdt_search_cb_t func,
                                   void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_mcdt_search_cb, herr_t,
                        (plist_id, func, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pregister1(hid_t cls_id, const char *name, size_t size,
                          void *def_value, H5P_prp_create_func_t prp_create,
                          H5P_prp_set_func_t prp_set,
                          H5P_prp_get_func_t prp_get,
                          H5P_prp_delete_func_t prp_del,
                          H5P_prp_copy_func_t prp_copy,
                          H5P_prp_close_func_t prp_close) {
  BRAHMA_UNWRAPPED_FUNC(H5Pregister1, herr_t,
                        (cls_id, name, size, def_value, prp_create, prp_set,
                         prp_get, prp_del, prp_copy, prp_close));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pinsert1(hid_t plist_id, const char *name, size_t size,
                        void *value, H5P_prp_set_func_t prp_set,
                        H5P_prp_get_func_t prp_get,
                        H5P_prp_delete_func_t prp_delete,
                        H5P_prp_copy_func_t prp_copy,
                        H5P_prp_close_func_t prp_close) {
  BRAHMA_UNWRAPPED_FUNC(H5Pinsert1, herr_t,
                        (plist_id, name, size, value, prp_set, prp_get,
                         prp_delete, prp_copy, prp_close));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5Z_filter_t HDF5::H5Pget_filter1(hid_t plist_id, unsigned int filter,
                                  unsigned int *flags, size_t *cd_nelmts,
                                  unsigned int cd_values[], size_t namelen,
                                  char name[]) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Pget_filter1, H5Z_filter_t,
      (plist_id, filter, flags, cd_nelmts, cd_values, namelen, name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_filter_by_id1(hid_t plist_id, H5Z_filter_t id,
                                  unsigned int *flags, size_t *cd_nelmts,
                                  unsigned int cd_values[], size_t namelen,
                                  char name[]) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Pget_filter_by_id1, herr_t,
      (plist_id, id, flags, cd_nelmts, cd_values, namelen, name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5PLset_loading_state(unsigned int plugin_control_mask) {
  BRAHMA_UNWRAPPED_FUNC(H5PLset_loading_state, herr_t, (plugin_control_mask));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5PLget_loading_state(unsigned int *plugin_control_mask) {
  BRAHMA_UNWRAPPED_FUNC(H5PLget_loading_state, herr_t, (plugin_control_mask));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5PLappend(const char *search_path) {
  BRAHMA_UNWRAPPED_FUNC(H5PLappend, herr_t, (search_path));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5PLprepend(const char *search_path) {
  BRAHMA_UNWRAPPED_FUNC(H5PLprepend, herr_t, (search_path));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5PLreplace(const char *search_path, unsigned int index) {
  BRAHMA_UNWRAPPED_FUNC(H5PLreplace, herr_t, (search_path, index));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5PLinsert(const char *search_path, unsigned int index) {
  BRAHMA_UNWRAPPED_FUNC(H5PLinsert, herr_t, (search_path, index));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5PLremove(unsigned int index) {
  BRAHMA_UNWRAPPED_FUNC(H5PLremove, herr_t, (index));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5PLget(unsigned int index, char *path_buf, size_t buf_size) {
  BRAHMA_UNWRAPPED_FUNC(H5PLget, ssize_t, (index, path_buf, buf_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5PLsize(unsigned int *num_paths) {
  BRAHMA_UNWRAPPED_FUNC(H5PLsize, herr_t, (num_paths));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Rcreate(void *ref, hid_t loc_id, const char *name,
                       H5R_type_t ref_type, hid_t space_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Rcreate, herr_t,
                        (ref, loc_id, name, ref_type, space_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
hid_t HDF5::H5Rdereference(hid_t dataset, H5R_type_t ref_type,
                           const void *ref) {
  BRAHMA_UNWRAPPED_FUNC(H5Rdereference, hid_t, (dataset, ref_type, ref));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Rget_region(hid_t dataset, H5R_type_t ref_type, const void *ref) {
  BRAHMA_UNWRAPPED_FUNC(H5Rget_region, hid_t, (dataset, ref_type, ref));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Rget_obj_type2(hid_t id, H5R_type_t ref_type, const void *_ref,
                              H5O_type_t *obj_type) {
  BRAHMA_UNWRAPPED_FUNC(H5Rget_obj_type2, herr_t,
                        (id, ref_type, _ref, obj_type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Rget_name(hid_t loc_id, H5R_type_t ref_type, const void *ref,
                          char *name, size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Rget_name, ssize_t,
                        (loc_id, ref_type, ref, name, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5G_obj_t HDF5::H5Rget_obj_type1(hid_t id, H5R_type_t ref_type,
                                 const void *ref) {
  BRAHMA_UNWRAPPED_FUNC(H5Rget_obj_type1, H5G_obj_t, (id, ref_type, ref));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sclose(hid_t space_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Sclose, herr_t, (space_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Scopy(hid_t space_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Scopy, hid_t, (space_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Screate(H5S_class_t type) {
  BRAHMA_UNWRAPPED_FUNC(H5Screate, hid_t, (type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Screate_simple(int rank, const hsize_t dims[],
                             const hsize_t maxdims[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Screate_simple, hid_t, (rank, dims, maxdims));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Sdecode(const void *buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Sdecode, hid_t, (buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
herr_t HDF5::H5Sencode(hid_t obj_id, void *buf, size_t *nalloc) {
  BRAHMA_UNWRAPPED_FUNC(H5Sencode, herr_t, (obj_id, buf, nalloc));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sextent_copy(hid_t dst_id, hid_t src_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Sextent_copy, herr_t, (dst_id, src_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Sextent_equal(hid_t space1_id, hid_t space2_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Sextent_equal, htri_t, (space1_id, space2_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Sget_simple_extent_dims(hid_t space_id, hsize_t dims[],
                                    hsize_t maxdims[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Sget_simple_extent_dims, int,
                        (space_id, dims, maxdims));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
int HDF5::H5Sget_simple_extent_ndims(hid_t space_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Sget_simple_extent_ndims, int, (space_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hssize_t HDF5::H5Sget_simple_extent_npoints(hid_t space_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Sget_simple_extent_npoints, hssize_t, (space_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5S_class_t HDF5::H5Sget_simple_extent_type(hid_t space_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Sget_simple_extent_type, H5S_class_t, (space_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Sis_simple(hid_t space_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Sis_simple, htri_t, (space_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sset_extent_none(hid_t space_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Sset_extent_none, herr_t, (space_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sset_extent_simple(hid_t space_id, int rank,
                                  const hsize_t dims[], const hsize_t max[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Sset_extent_simple, herr_t,
                        (space_id, rank, dims, max));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sget_select_bounds(hid_t spaceid, hsize_t start[],
                                  hsize_t end[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Sget_select_bounds, herr_t, (spaceid, start, end));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hssize_t HDF5::H5Sget_select_elem_npoints(hid_t spaceid) {
  BRAHMA_UNWRAPPED_FUNC(H5Sget_select_elem_npoints, hssize_t, (spaceid));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sget_select_elem_pointlist(hid_t spaceid, hsize_t startpoint,
                                          hsize_t numpoints, hsize_t buf[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Sget_select_elem_pointlist, herr_t,
                        (spaceid, startpoint, numpoints, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sget_select_hyper_blocklist(hid_t spaceid, hsize_t startblock,
                                           hsize_t numblocks, hsize_t buf[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Sget_select_hyper_blocklist, herr_t,
                        (spaceid, startblock, numblocks, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hssize_t HDF5::H5Sget_select_hyper_nblocks(hid_t spaceid) {
  BRAHMA_UNWRAPPED_FUNC(H5Sget_select_hyper_nblocks, hssize_t, (spaceid));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hssize_t HDF5::H5Sget_select_npoints(hid_t spaceid) {
  BRAHMA_UNWRAPPED_FUNC(H5Sget_select_npoints, hssize_t, (spaceid));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
H5S_sel_type HDF5::H5Sget_select_type(hid_t spaceid) {
  BRAHMA_UNWRAPPED_FUNC(H5Sget_select_type, H5S_sel_type, (spaceid));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Soffset_simple(hid_t space_id, const hssize_t *offset) {
  BRAHMA_UNWRAPPED_FUNC(H5Soffset_simple, herr_t, (space_id, offset));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sselect_all(hid_t spaceid) {
  BRAHMA_UNWRAPPED_FUNC(H5Sselect_all, herr_t, (spaceid));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sselect_elements(hid_t space_id, H5S_seloper_t op,
                                size_t num_elem, const hsize_t *coord) {
  BRAHMA_UNWRAPPED_FUNC(H5Sselect_elements, herr_t,
                        (space_id, op, num_elem, coord));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sselect_hyperslab(hid_t space_id, H5S_seloper_t op,
                                 const hsize_t start[], const hsize_t stride[],
                                 const hsize_t count[], const hsize_t block[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Sselect_hyperslab, herr_t,
                        (space_id, op, start, stride, count, block));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sselect_none(hid_t spaceid) {
  BRAHMA_UNWRAPPED_FUNC(H5Sselect_none, herr_t, (spaceid));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Sselect_valid(hid_t spaceid) {
  BRAHMA_UNWRAPPED_FUNC(H5Sselect_valid, htri_t, (spaceid));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5FD_core_init(void) {
  BRAHMA_UNWRAPPED_FUNC(H5FD_core_init, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
void HDF5::H5FD_core_term(void) {
  BRAHMA_UNWRAPPED_FUNC_VOID(H5FD_core_term, ());
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_fapl_core(hid_t fapl_id, size_t increment,
                              hbool_t backing_store) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_fapl_core, herr_t,
                        (fapl_id, increment, backing_store));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_fapl_core(hid_t fapl_id, size_t *increment,
                              hbool_t *backing_store) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_fapl_core, herr_t,
                        (fapl_id, increment, backing_store));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5FD_family_init(void) {
  BRAHMA_UNWRAPPED_FUNC(H5FD_family_init, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
void HDF5::H5FD_family_term(void) {
  BRAHMA_UNWRAPPED_FUNC_VOID(H5FD_family_term, ());
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_fapl_family(hid_t fapl_id, hsize_t memb_size,
                                hid_t memb_fapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_fapl_family, herr_t,
                        (fapl_id, memb_size, memb_fapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_fapl_family(hid_t fapl_id, hsize_t *memb_size,
                                hid_t *memb_fapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_fapl_family, herr_t,
                        (fapl_id, memb_size, memb_fapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101200
hid_t HDF5::H5FD_hdfs_init(void) {
  BRAHMA_UNWRAPPED_FUNC(H5FD_hdfs_init, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
void HDF5::H5FD_hdfs_term(void) {
  BRAHMA_UNWRAPPED_FUNC_VOID(H5FD_hdfs_term, ());
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101200
herr_t HDF5::H5Pget_fapl_hdfs(hid_t fapl_id, H5FD_hdfs_fapl_t *fa_out) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_fapl_hdfs, herr_t, (fapl_id, fa_out));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101200
herr_t HDF5::H5Pset_fapl_hdfs(hid_t fapl_id, H5FD_hdfs_fapl_t *fa) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_fapl_hdfs, herr_t, (fapl_id, fa));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5FD_log_init(void) {
  BRAHMA_UNWRAPPED_FUNC(H5FD_log_init, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
void HDF5::H5FD_log_term(void) {
  BRAHMA_UNWRAPPED_FUNC_VOID(H5FD_log_term, ());
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_fapl_log(hid_t fapl_id, const char *logfile,
                             unsigned long long flags, size_t buf_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_fapl_log, herr_t,
                        (fapl_id, logfile, flags, buf_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5FD_mpio_init(void) {
  BRAHMA_UNWRAPPED_FUNC(H5FD_mpio_init, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
void HDF5::H5FD_mpio_term(void) {
  BRAHMA_UNWRAPPED_FUNC_VOID(H5FD_mpio_term, ());
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_fapl_mpio(hid_t fapl_id, int comm, int info) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_fapl_mpio, herr_t, (fapl_id, comm, info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_fapl_mpio(hid_t fapl_id, int *comm, int *info) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_fapl_mpio, herr_t, (fapl_id, comm, info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_dxpl_mpio(hid_t dxpl_id, H5FD_mpio_xfer_t xfer_mode) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_dxpl_mpio, herr_t, (dxpl_id, xfer_mode));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_dxpl_mpio(hid_t dxpl_id, H5FD_mpio_xfer_t *xfer_mode) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_dxpl_mpio, herr_t, (dxpl_id, xfer_mode));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_dxpl_mpio_collective_opt(
    hid_t dxpl_id, H5FD_mpio_collective_opt_t opt_mode) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_dxpl_mpio_collective_opt, herr_t,
                        (dxpl_id, opt_mode));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_dxpl_mpio_chunk_opt(hid_t dxpl_id,
                                        H5FD_mpio_chunk_opt_t opt_mode) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_dxpl_mpio_chunk_opt, herr_t,
                        (dxpl_id, opt_mode));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_dxpl_mpio_chunk_opt_num(hid_t dxpl_id,
                                            unsigned int num_chunk_per_proc) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_dxpl_mpio_chunk_opt_num, herr_t,
                        (dxpl_id, num_chunk_per_proc));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_dxpl_mpio_chunk_opt_ratio(
    hid_t dxpl_id, unsigned int percent_num_proc_per_chunk) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_dxpl_mpio_chunk_opt_ratio, herr_t,
                        (dxpl_id, percent_num_proc_per_chunk));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5FD_multi_init(void) {
  BRAHMA_UNWRAPPED_FUNC(H5FD_multi_init, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
void HDF5::H5FD_multi_term(void) {
  BRAHMA_UNWRAPPED_FUNC_VOID(H5FD_multi_term, ());
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_fapl_multi(hid_t fapl_id, const H5FD_mem_t *memb_map,
                               const hid_t *memb_fapl,
                               const char *const *memb_name,
                               const haddr_t *memb_addr, hbool_t relax) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Pset_fapl_multi, herr_t,
      (fapl_id, memb_map, memb_fapl, memb_name, memb_addr, relax));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_fapl_multi(hid_t fapl_id, H5FD_mem_t *memb_map,
                               hid_t *memb_fapl, char **memb_name,
                               haddr_t *memb_addr, hbool_t *relax) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Pget_fapl_multi, herr_t,
      (fapl_id, memb_map, memb_fapl, memb_name, memb_addr, relax));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_fapl_split(hid_t fapl, const char *meta_ext,
                               hid_t meta_plist_id, const char *raw_ext,
                               hid_t raw_plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_fapl_split, herr_t,
                        (fapl, meta_ext, meta_plist_id, raw_ext, raw_plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5FD_sec2_init(void) {
  BRAHMA_UNWRAPPED_FUNC(H5FD_sec2_init, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
void HDF5::H5FD_sec2_term(void) {
  BRAHMA_UNWRAPPED_FUNC_VOID(H5FD_sec2_term, ());
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_fapl_sec2(hid_t fapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_fapl_sec2, herr_t, (fapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5FD_stdio_init(void) {
  BRAHMA_UNWRAPPED_FUNC(H5FD_stdio_init, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800
void HDF5::H5FD_stdio_term(void) {
  BRAHMA_UNWRAPPED_FUNC_VOID(H5FD_stdio_term, ());
}
#endif

#if BRAHMA_HDF5_VERSION >= 100800 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_fapl_stdio(hid_t fapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_fapl_stdio, herr_t, (fapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5get_free_list_sizes(size_t *reg_size, size_t *arr_size,
                                   size_t *blk_size, size_t *fac_size) {
  BRAHMA_UNWRAPPED_FUNC(H5get_free_list_sizes, herr_t,
                        (reg_size, arr_size, blk_size, fac_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5get_alloc_stats(H5_alloc_stats_t *stats) {
  BRAHMA_UNWRAPPED_FUNC(H5get_alloc_stats, herr_t, (stats));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Iiterate(H5I_type_t type, H5I_iterate_func_t op, void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Iiterate, herr_t, (type, op, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Tflush(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tflush, herr_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Trefresh(hid_t type_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Trefresh, herr_t, (type_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Treclaim(hid_t type_id, hid_t space_id, hid_t plist_id,
                        void *buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Treclaim, herr_t, (type_id, space_id, plist_id, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lget_info2(hid_t loc_id, const char *name, H5L_info2_t *linfo,
                          hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Lget_info2, herr_t, (loc_id, name, linfo, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lget_info_by_idx2(hid_t loc_id, const char *group_name,
                                 H5_index_t idx_type, H5_iter_order_t order,
                                 hsize_t n, H5L_info2_t *linfo, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lget_info_by_idx2, herr_t,
      (loc_id, group_name, idx_type, order, n, linfo, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Literate2(hid_t grp_id, H5_index_t idx_type,
                         H5_iter_order_t order, hsize_t *idx, H5L_iterate2_t op,
                         void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Literate2, herr_t,
                        (grp_id, idx_type, order, idx, op, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Literate_by_name2(hid_t loc_id, const char *group_name,
                                 H5_index_t idx_type, H5_iter_order_t order,
                                 hsize_t *idx, H5L_iterate2_t op, void *op_data,
                                 hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Literate_by_name2, herr_t,
      (loc_id, group_name, idx_type, order, idx, op, op_data, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lvisit2(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order,
                       H5L_iterate2_t op, void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Lvisit2, herr_t,
                        (grp_id, idx_type, order, op, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lvisit_by_name2(hid_t loc_id, const char *group_name,
                               H5_index_t idx_type, H5_iter_order_t order,
                               H5L_iterate2_t op, void *op_data,
                               hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lvisit_by_name2, herr_t,
      (loc_id, group_name, idx_type, order, op, op_data, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lget_info1(hid_t loc_id, const char *name, H5L_info1_t *linfo,
                          hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Lget_info1, herr_t, (loc_id, name, linfo, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lget_info_by_idx1(hid_t loc_id, const char *group_name,
                                 H5_index_t idx_type, H5_iter_order_t order,
                                 hsize_t n, H5L_info1_t *linfo, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lget_info_by_idx1, herr_t,
      (loc_id, group_name, idx_type, order, n, linfo, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Literate1(hid_t grp_id, H5_index_t idx_type,
                         H5_iter_order_t order, hsize_t *idx, H5L_iterate1_t op,
                         void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Literate1, herr_t,
                        (grp_id, idx_type, order, idx, op, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Literate_by_name1(hid_t loc_id, const char *group_name,
                                 H5_index_t idx_type, H5_iter_order_t order,
                                 hsize_t *idx, H5L_iterate1_t op, void *op_data,
                                 hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Literate_by_name1, herr_t,
      (loc_id, group_name, idx_type, order, idx, op, op_data, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lvisit1(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order,
                       H5L_iterate1_t op, void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Lvisit1, herr_t,
                        (grp_id, idx_type, order, op, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Lvisit_by_name1(hid_t loc_id, const char *group_name,
                               H5_index_t idx_type, H5_iter_order_t order,
                               H5L_iterate1_t op, void *op_data,
                               hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lvisit_by_name1, herr_t,
      (loc_id, group_name, idx_type, order, op, op_data, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Oopen_by_token(hid_t loc_id, H5O_token_t token) {
  BRAHMA_UNWRAPPED_FUNC(H5Oopen_by_token, hid_t, (loc_id, token));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oget_info3(hid_t loc_id, H5O_info2_t *oinfo,
                          unsigned int fields) {
  BRAHMA_UNWRAPPED_FUNC(H5Oget_info3, herr_t, (loc_id, oinfo, fields));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oget_info_by_name3(hid_t loc_id, const char *name,
                                  H5O_info2_t *oinfo, unsigned int fields,
                                  hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oget_info_by_name3, herr_t,
                        (loc_id, name, oinfo, fields, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oget_info_by_idx3(hid_t loc_id, const char *group_name,
                                 H5_index_t idx_type, H5_iter_order_t order,
                                 hsize_t n, H5O_info2_t *oinfo,
                                 unsigned int fields, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Oget_info_by_idx3, herr_t,
      (loc_id, group_name, idx_type, order, n, oinfo, fields, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oget_native_info(hid_t loc_id, H5O_native_info_t *oinfo,
                                unsigned int fields) {
  BRAHMA_UNWRAPPED_FUNC(H5Oget_native_info, herr_t, (loc_id, oinfo, fields));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oget_native_info_by_name(hid_t loc_id, const char *name,
                                        H5O_native_info_t *oinfo,
                                        unsigned int fields, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oget_native_info_by_name, herr_t,
                        (loc_id, name, oinfo, fields, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oget_native_info_by_idx(hid_t loc_id, const char *group_name,
                                       H5_index_t idx_type,
                                       H5_iter_order_t order, hsize_t n,
                                       H5O_native_info_t *oinfo,
                                       unsigned int fields, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Oget_native_info_by_idx, herr_t,
      (loc_id, group_name, idx_type, order, n, oinfo, fields, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Ovisit3(hid_t obj_id, H5_index_t idx_type, H5_iter_order_t order,
                       H5O_iterate2_t op, void *op_data, unsigned int fields) {
  BRAHMA_UNWRAPPED_FUNC(H5Ovisit3, herr_t,
                        (obj_id, idx_type, order, op, op_data, fields));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Ovisit_by_name3(hid_t loc_id, const char *obj_name,
                               H5_index_t idx_type, H5_iter_order_t order,
                               H5O_iterate2_t op, void *op_data,
                               unsigned int fields, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Ovisit_by_name3, herr_t,
      (loc_id, obj_name, idx_type, order, op, op_data, fields, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oflush(hid_t obj_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oflush, herr_t, (obj_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Orefresh(hid_t oid) {
  BRAHMA_UNWRAPPED_FUNC(H5Orefresh, herr_t, (oid));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Odisable_mdc_flushes(hid_t object_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Odisable_mdc_flushes, herr_t, (object_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oenable_mdc_flushes(hid_t object_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oenable_mdc_flushes, herr_t, (object_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oare_mdc_flushes_disabled(hid_t object_id,
                                         hbool_t *are_disabled) {
  BRAHMA_UNWRAPPED_FUNC(H5Oare_mdc_flushes_disabled, herr_t,
                        (object_id, are_disabled));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Otoken_cmp(hid_t loc_id, const H5O_token_t *token1,
                          const H5O_token_t *token2, int *cmp_value) {
  BRAHMA_UNWRAPPED_FUNC(H5Otoken_cmp, herr_t,
                        (loc_id, token1, token2, cmp_value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Otoken_to_str(hid_t loc_id, const H5O_token_t *token,
                             char **token_str) {
  BRAHMA_UNWRAPPED_FUNC(H5Otoken_to_str, herr_t, (loc_id, token, token_str));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Otoken_from_str(hid_t loc_id, const char *token_str,
                               H5O_token_t *token) {
  BRAHMA_UNWRAPPED_FUNC(H5Otoken_from_str, herr_t, (loc_id, token_str, token));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oget_info1(hid_t loc_id, H5O_info1_t *oinfo) {
  BRAHMA_UNWRAPPED_FUNC(H5Oget_info1, herr_t, (loc_id, oinfo));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oget_info_by_name1(hid_t loc_id, const char *name,
                                  H5O_info1_t *oinfo, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oget_info_by_name1, herr_t,
                        (loc_id, name, oinfo, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oget_info_by_idx1(hid_t loc_id, const char *group_name,
                                 H5_index_t idx_type, H5_iter_order_t order,
                                 hsize_t n, H5O_info1_t *oinfo, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Oget_info_by_idx1, herr_t,
      (loc_id, group_name, idx_type, order, n, oinfo, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oget_info2(hid_t loc_id, H5O_info1_t *oinfo,
                          unsigned int fields) {
  BRAHMA_UNWRAPPED_FUNC(H5Oget_info2, herr_t, (loc_id, oinfo, fields));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oget_info_by_name2(hid_t loc_id, const char *name,
                                  H5O_info1_t *oinfo, unsigned int fields,
                                  hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oget_info_by_name2, herr_t,
                        (loc_id, name, oinfo, fields, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Oget_info_by_idx2(hid_t loc_id, const char *group_name,
                                 H5_index_t idx_type, H5_iter_order_t order,
                                 hsize_t n, H5O_info1_t *oinfo,
                                 unsigned int fields, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Oget_info_by_idx2, herr_t,
      (loc_id, group_name, idx_type, order, n, oinfo, fields, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Ovisit1(hid_t obj_id, H5_index_t idx_type, H5_iter_order_t order,
                       H5O_iterate1_t op, void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Ovisit1, herr_t,
                        (obj_id, idx_type, order, op, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Ovisit_by_name1(hid_t loc_id, const char *obj_name,
                               H5_index_t idx_type, H5_iter_order_t order,
                               H5O_iterate1_t op, void *op_data,
                               hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Ovisit_by_name1, herr_t,
      (loc_id, obj_name, idx_type, order, op, op_data, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Ovisit2(hid_t obj_id, H5_index_t idx_type, H5_iter_order_t order,
                       H5O_iterate1_t op, void *op_data, unsigned int fields) {
  BRAHMA_UNWRAPPED_FUNC(H5Ovisit2, herr_t,
                        (obj_id, idx_type, order, op, op_data, fields));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Ovisit_by_name2(hid_t loc_id, const char *obj_name,
                               H5_index_t idx_type, H5_iter_order_t order,
                               H5O_iterate1_t op, void *op_data,
                               unsigned int fields, hid_t lapl_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Ovisit_by_name2, herr_t,
      (loc_id, obj_name, idx_type, order, op, op_data, fields, lapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dget_num_chunks(hid_t dset_id, hid_t fspace_id,
                               hsize_t *nchunks) {
  BRAHMA_UNWRAPPED_FUNC(H5Dget_num_chunks, herr_t,
                        (dset_id, fspace_id, nchunks));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dget_chunk_info_by_coord(hid_t dset_id, const hsize_t *offset,
                                        unsigned int *filter_mask,
                                        haddr_t *addr, hsize_t *size) {
  BRAHMA_UNWRAPPED_FUNC(H5Dget_chunk_info_by_coord, herr_t,
                        (dset_id, offset, filter_mask, addr, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dget_chunk_info(hid_t dset_id, hid_t fspace_id, hsize_t chk_idx,
                               hsize_t *offset, unsigned int *filter_mask,
                               haddr_t *addr, hsize_t *size) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Dget_chunk_info, herr_t,
      (dset_id, fspace_id, chk_idx, offset, filter_mask, addr, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dwrite_chunk(hid_t dset_id, hid_t dxpl_id, uint32_t filters,
                            const hsize_t *offset, size_t data_size,
                            const void *buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Dwrite_chunk, herr_t,
                        (dset_id, dxpl_id, filters, offset, data_size, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dread_chunk(hid_t dset_id, hid_t dxpl_id, const hsize_t *offset,
                           uint32_t *filters, void *buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Dread_chunk, herr_t,
                        (dset_id, dxpl_id, offset, filters, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dflush(hid_t dset_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dflush, herr_t, (dset_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Drefresh(hid_t dset_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Drefresh, herr_t, (dset_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dformat_convert(hid_t dset_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dformat_convert, herr_t, (dset_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Dget_chunk_index_type(hid_t did, H5D_chunk_index_t *idx_type) {
  BRAHMA_UNWRAPPED_FUNC(H5Dget_chunk_index_type, herr_t, (did, idx_type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Eappend_stack(hid_t dst_stack_id, hid_t src_stack_id,
                             hbool_t close_source_stack) {
  BRAHMA_UNWRAPPED_FUNC(H5Eappend_stack, herr_t,
                        (dst_stack_id, src_stack_id, close_source_stack));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Fis_accessible(const char *container_name, hid_t fapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Fis_accessible, htri_t, (container_name, fapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fdelete(const char *filename, hid_t fapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Fdelete, herr_t, (filename, fapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_fileno(hid_t file_id, unsigned long *fileno) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_fileno, herr_t, (file_id, fileno));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_eoa(hid_t file_id, haddr_t *eoa) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_eoa, herr_t, (file_id, eoa));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fincrement_filesize(hid_t file_id, hsize_t increment) {
  BRAHMA_UNWRAPPED_FUNC(H5Fincrement_filesize, herr_t, (file_id, increment));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_info2(hid_t obj_id, H5F_info2_t *file_info) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_info2, herr_t, (obj_id, file_info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_metadata_read_retry_info(hid_t file_id,
                                             H5F_retry_info_t *info) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_metadata_read_retry_info, herr_t,
                        (file_id, info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fstart_swmr_write(hid_t file_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Fstart_swmr_write, herr_t, (file_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Fget_free_sections(hid_t file_id, H5F_mem_t type, size_t nsects,
                                   H5F_sect_info_t *sect_info) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_free_sections, ssize_t,
                        (file_id, type, nsects, sect_info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fset_libver_bounds(hid_t file_id, H5F_libver_t low,
                                  H5F_libver_t high) {
  BRAHMA_UNWRAPPED_FUNC(H5Fset_libver_bounds, herr_t, (file_id, low, high));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fstart_mdc_logging(hid_t file_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Fstart_mdc_logging, herr_t, (file_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fstop_mdc_logging(hid_t file_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Fstop_mdc_logging, herr_t, (file_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_mdc_logging_status(hid_t file_id, hbool_t *is_enabled,
                                       hbool_t *is_currently_logging) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_mdc_logging_status, herr_t,
                        (file_id, is_enabled, is_currently_logging));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fformat_convert(hid_t fid) {
  BRAHMA_UNWRAPPED_FUNC(H5Fformat_convert, herr_t, (fid));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Freset_page_buffering_stats(hid_t file_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Freset_page_buffering_stats, herr_t, (file_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_page_buffering_stats(hid_t file_id,
                                         unsigned int accesses[2],
                                         unsigned int hits[2],
                                         unsigned int misses[2],
                                         unsigned int evictions[2],
                                         unsigned int bypasses[2]) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_page_buffering_stats, herr_t,
                        (file_id, accesses, hits, misses, evictions, bypasses));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_mdc_image_info(hid_t file_id, haddr_t *image_addr,
                                   hsize_t *image_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_mdc_image_info, herr_t,
                        (file_id, image_addr, image_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_dset_no_attrs_hint(hid_t file_id, hbool_t *minimize) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_dset_no_attrs_hint, herr_t, (file_id, minimize));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fset_dset_no_attrs_hint(hid_t file_id, hbool_t minimize) {
  BRAHMA_UNWRAPPED_FUNC(H5Fset_dset_no_attrs_hint, herr_t, (file_id, minimize));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fget_info1(hid_t obj_id, H5F_info1_t *file_info) {
  BRAHMA_UNWRAPPED_FUNC(H5Fget_info1, herr_t, (obj_id, file_info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Fset_latest_format(hid_t file_id, hbool_t latest_format) {
  BRAHMA_UNWRAPPED_FUNC(H5Fset_latest_format, herr_t, (file_id, latest_format));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Fis_hdf5(const char *file_name) {
  BRAHMA_UNWRAPPED_FUNC(H5Fis_hdf5, htri_t, (file_name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
haddr_t HDF5::H5FDget_eof(H5FD_t *file, H5FD_mem_t type) {
  BRAHMA_UNWRAPPED_FUNC(H5FDget_eof, haddr_t, (file, type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5FDflush(H5FD_t *file, hid_t dxpl_id, hbool_t closing) {
  BRAHMA_UNWRAPPED_FUNC(H5FDflush, herr_t, (file, dxpl_id, closing));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5FDlock(H5FD_t *file, hbool_t rw) {
  BRAHMA_UNWRAPPED_FUNC(H5FDlock, herr_t, (file, rw));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5FDunlock(H5FD_t *file) {
  BRAHMA_UNWRAPPED_FUNC(H5FDunlock, herr_t, (file));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Scombine_hyperslab(hid_t space_id, H5S_seloper_t op,
                                 const hsize_t start[], const hsize_t stride[],
                                 const hsize_t count[], const hsize_t block[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Scombine_hyperslab, hid_t,
                        (space_id, op, start, stride, count, block));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Scombine_select(hid_t space1_id, H5S_seloper_t op,
                              hid_t space2_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Scombine_select, hid_t, (space1_id, op, space2_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sencode2(hid_t obj_id, void *buf, size_t *nalloc, hid_t fapl) {
  BRAHMA_UNWRAPPED_FUNC(H5Sencode2, herr_t, (obj_id, buf, nalloc, fapl));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Sget_regular_hyperslab(hid_t spaceid, hsize_t start[],
                                      hsize_t stride[], hsize_t count[],
                                      hsize_t block[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Sget_regular_hyperslab, htri_t,
                        (spaceid, start, stride, count, block));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Sis_regular_hyperslab(hid_t spaceid) {
  BRAHMA_UNWRAPPED_FUNC(H5Sis_regular_hyperslab, htri_t, (spaceid));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Smodify_select(hid_t space1_id, H5S_seloper_t op,
                              hid_t space2_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Smodify_select, herr_t, (space1_id, op, space2_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Ssel_iter_close(hid_t sel_iter_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Ssel_iter_close, herr_t, (sel_iter_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Ssel_iter_create(hid_t spaceid, size_t elmt_size,
                               unsigned int flags) {
  BRAHMA_UNWRAPPED_FUNC(H5Ssel_iter_create, hid_t, (spaceid, elmt_size, flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5Ssel_iter_get_seq_list(hid_t sel_iter_id, size_t maxseq,
                                      size_t maxbytes, size_t *nseq,
                                      size_t *nbytes, hsize_t *off,
                                      size_t *len) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Ssel_iter_get_seq_list, herr_t,
      (sel_iter_id, maxseq, maxbytes, nseq, nbytes, off, len));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Ssel_iter_reset(hid_t sel_iter_id, hid_t space_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Ssel_iter_reset, herr_t, (sel_iter_id, space_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sselect_adjust(hid_t spaceid, const hssize_t *offset) {
  BRAHMA_UNWRAPPED_FUNC(H5Sselect_adjust, herr_t, (spaceid, offset));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sselect_copy(hid_t dst_id, hid_t src_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Sselect_copy, herr_t, (dst_id, src_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Sselect_intersect_block(hid_t space_id, const hsize_t *start,
                                       const hsize_t *end) {
  BRAHMA_UNWRAPPED_FUNC(H5Sselect_intersect_block, htri_t,
                        (space_id, start, end));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Sselect_project_intersection(hid_t src_space_id,
                                           hid_t dst_space_id,
                                           hid_t src_intersect_space_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Sselect_project_intersection, hid_t,
                        (src_space_id, dst_space_id, src_intersect_space_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Sselect_shape_same(hid_t space1_id, hid_t space2_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Sselect_shape_same, htri_t, (space1_id, space2_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Sencode1(hid_t obj_id, void *buf, size_t *nalloc) {
  BRAHMA_UNWRAPPED_FUNC(H5Sencode1, herr_t, (obj_id, buf, nalloc));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Pdecode(const void *buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Pdecode, hid_t, (buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pencode2(hid_t plist_id, void *buf, size_t *nalloc,
                        hid_t fapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pencode2, herr_t, (plist_id, buf, nalloc, fapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset(hid_t plist_id, const char *name, const void *value) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset, herr_t, (plist_id, name, value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_file_space_page_size(hid_t plist_id, hsize_t *fsp_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_file_space_page_size, herr_t,
                        (plist_id, fsp_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_file_space_strategy(hid_t plist_id,
                                        H5F_fspace_strategy_t *strategy,
                                        hbool_t *persist, hsize_t *threshold) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_file_space_strategy, herr_t,
                        (plist_id, strategy, persist, threshold));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_file_space_page_size(hid_t plist_id, hsize_t fsp_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_file_space_page_size, herr_t,
                        (plist_id, fsp_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_file_space_strategy(hid_t plist_id,
                                        H5F_fspace_strategy_t strategy,
                                        hbool_t persist, hsize_t threshold) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_file_space_strategy, herr_t,
                        (plist_id, strategy, persist, threshold));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
const void *HDF5::H5Pget_driver_info(hid_t plist_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_driver_info, const void *, (plist_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_evict_on_close(hid_t fapl_id, hbool_t *evict_on_close) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_evict_on_close, herr_t,
                        (fapl_id, evict_on_close));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_file_locking(hid_t fapl_id, hbool_t *use_file_locking,
                                 hbool_t *ignore_when_disabled) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_file_locking, herr_t,
                        (fapl_id, use_file_locking, ignore_when_disabled));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_mdc_image_config(hid_t plist_id,
                                     H5AC_cache_image_config_t *config_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_mdc_image_config, herr_t,
                        (plist_id, config_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_mdc_log_options(hid_t plist_id, hbool_t *is_enabled,
                                    char *location, size_t *location_size,
                                    hbool_t *start_on_access) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Pget_mdc_log_options, herr_t,
      (plist_id, is_enabled, location, location_size, start_on_access));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_metadata_read_attempts(hid_t plist_id,
                                           unsigned int *attempts) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_metadata_read_attempts, herr_t,
                        (plist_id, attempts));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_object_flush_cb(hid_t plist_id, H5F_flush_cb_t *func,
                                    void **udata) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_object_flush_cb, herr_t,
                        (plist_id, func, udata));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_page_buffer_size(hid_t plist_id, size_t *buf_size,
                                     unsigned int *min_meta_perc,
                                     unsigned int *min_raw_perc) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_page_buffer_size, herr_t,
                        (plist_id, buf_size, min_meta_perc, min_raw_perc));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_vol_id(hid_t plist_id, hid_t *vol_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_vol_id, herr_t, (plist_id, vol_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_vol_info(hid_t plist_id, void **vol_info) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_vol_info, herr_t, (plist_id, vol_info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_evict_on_close(hid_t fapl_id, hbool_t evict_on_close) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_evict_on_close, herr_t,
                        (fapl_id, evict_on_close));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_file_locking(hid_t fapl_id, hbool_t use_file_locking,
                                 hbool_t ignore_when_disabled) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_file_locking, herr_t,
                        (fapl_id, use_file_locking, ignore_when_disabled));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_mdc_log_options(hid_t plist_id, hbool_t is_enabled,
                                    const char *location,
                                    hbool_t start_on_access) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_mdc_log_options, herr_t,
                        (plist_id, is_enabled, location, start_on_access));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_metadata_read_attempts(hid_t plist_id,
                                           unsigned int attempts) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_metadata_read_attempts, herr_t,
                        (plist_id, attempts));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_object_flush_cb(hid_t plist_id, H5F_flush_cb_t func,
                                    void *udata) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_object_flush_cb, herr_t,
                        (plist_id, func, udata));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_vol(hid_t plist_id, hid_t new_vol_id,
                        const void *new_vol_info) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_vol, herr_t,
                        (plist_id, new_vol_id, new_vol_info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_all_coll_metadata_ops(hid_t plist_id,
                                          hbool_t is_collective) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_all_coll_metadata_ops, herr_t,
                        (plist_id, is_collective));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_all_coll_metadata_ops(hid_t plist_id,
                                          hbool_t *is_collective) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_all_coll_metadata_ops, herr_t,
                        (plist_id, is_collective));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_coll_metadata_write(hid_t plist_id, hbool_t is_collective) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_coll_metadata_write, herr_t,
                        (plist_id, is_collective));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_coll_metadata_write(hid_t plist_id,
                                        hbool_t *is_collective) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_coll_metadata_write, herr_t,
                        (plist_id, is_collective));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_mpi_params(hid_t fapl_id, int *comm, int *info) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_mpi_params, herr_t, (fapl_id, comm, info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_mpi_params(hid_t fapl_id, int comm, int info) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_mpi_params, herr_t, (fapl_id, comm, info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_mdc_image_config(hid_t plist_id,
                                     H5AC_cache_image_config_t *config_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_mdc_image_config, herr_t,
                        (plist_id, config_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_page_buffer_size(hid_t plist_id, size_t buf_size,
                                     unsigned int min_meta_per,
                                     unsigned int min_raw_per) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_page_buffer_size, herr_t,
                        (plist_id, buf_size, min_meta_per, min_raw_per));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_chunk_opts(hid_t plist_id, unsigned int *opts) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_chunk_opts, herr_t, (plist_id, opts));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_dset_no_attrs_hint(hid_t dcpl_id, hbool_t *minimize) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_dset_no_attrs_hint, herr_t, (dcpl_id, minimize));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_virtual_count(hid_t dcpl_id, size_t *count) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_virtual_count, herr_t, (dcpl_id, count));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Pget_virtual_dsetname(hid_t dcpl_id, size_t index, char *name,
                                      size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_virtual_dsetname, ssize_t,
                        (dcpl_id, index, name, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Pget_virtual_filename(hid_t dcpl_id, size_t index, char *name,
                                      size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_virtual_filename, ssize_t,
                        (dcpl_id, index, name, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Pget_virtual_srcspace(hid_t dcpl_id, size_t index) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_virtual_srcspace, hid_t, (dcpl_id, index));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Pget_virtual_vspace(hid_t dcpl_id, size_t index) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_virtual_vspace, hid_t, (dcpl_id, index));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_chunk_opts(hid_t plist_id, unsigned int opts) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_chunk_opts, herr_t, (plist_id, opts));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_dset_no_attrs_hint(hid_t dcpl_id, hbool_t minimize) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_dset_no_attrs_hint, herr_t, (dcpl_id, minimize));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_virtual(hid_t dcpl_id, hid_t vspace_id,
                            const char *src_file_name,
                            const char *src_dset_name, hid_t src_space_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Pset_virtual, herr_t,
      (dcpl_id, vspace_id, src_file_name, src_dset_name, src_space_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_append_flush(hid_t dapl_id, unsigned int dims,
                                 hsize_t boundary[], H5D_append_cb_t *func,
                                 void **udata) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_append_flush, herr_t,
                        (dapl_id, dims, boundary, func, udata));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Pget_virtual_prefix(hid_t dapl_id, char *prefix, size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_virtual_prefix, ssize_t,
                        (dapl_id, prefix, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_virtual_printf_gap(hid_t dapl_id, hsize_t *gap_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_virtual_printf_gap, herr_t, (dapl_id, gap_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_virtual_view(hid_t dapl_id, H5D_vds_view_t *view) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_virtual_view, herr_t, (dapl_id, view));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_append_flush(hid_t dapl_id, unsigned int ndims,
                                 const hsize_t boundary[], H5D_append_cb_t func,
                                 void *udata) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_append_flush, herr_t,
                        (dapl_id, ndims, boundary, func, udata));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_virtual_prefix(hid_t dapl_id, const char *prefix) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_virtual_prefix, herr_t, (dapl_id, prefix));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_virtual_printf_gap(hid_t dapl_id, hsize_t gap_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_virtual_printf_gap, herr_t, (dapl_id, gap_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_virtual_view(hid_t dapl_id, H5D_vds_view_t view) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_virtual_view, herr_t, (dapl_id, view));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pencode1(hid_t plist_id, void *buf, size_t *nalloc) {
  BRAHMA_UNWRAPPED_FUNC(H5Pencode1, herr_t, (plist_id, buf, nalloc));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_file_space(hid_t plist_id, H5F_file_space_type_t strategy,
                               hsize_t threshold) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_file_space, herr_t,
                        (plist_id, strategy, threshold));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_file_space(hid_t plist_id, H5F_file_space_type_t *strategy,
                               hsize_t *threshold) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_file_space, herr_t,
                        (plist_id, strategy, threshold));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Rcreate_object(hid_t loc_id, const char *name, hid_t oapl_id,
                              H5R_ref_t *ref_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Rcreate_object, herr_t,
                        (loc_id, name, oapl_id, ref_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Rcreate_region(hid_t loc_id, const char *name, hid_t space_id,
                              hid_t oapl_id, H5R_ref_t *ref_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Rcreate_region, herr_t,
                        (loc_id, name, space_id, oapl_id, ref_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Rcreate_attr(hid_t loc_id, const char *name,
                            const char *attr_name, hid_t oapl_id,
                            H5R_ref_t *ref_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Rcreate_attr, herr_t,
                        (loc_id, name, attr_name, oapl_id, ref_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Rdestroy(H5R_ref_t *ref_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Rdestroy, herr_t, (ref_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
H5R_type_t HDF5::H5Rget_type(const H5R_ref_t *ref_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Rget_type, H5R_type_t, (ref_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5Requal(const H5R_ref_t *ref1_ptr, const H5R_ref_t *ref2_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Requal, htri_t, (ref1_ptr, ref2_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Rcopy(const H5R_ref_t *src_ref_ptr, H5R_ref_t *dst_ref_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Rcopy, herr_t, (src_ref_ptr, dst_ref_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Ropen_object(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t oapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Ropen_object, hid_t, (ref_ptr, rapl_id, oapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Ropen_region(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t oapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Ropen_region, hid_t, (ref_ptr, rapl_id, oapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Ropen_attr(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t aapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Ropen_attr, hid_t, (ref_ptr, rapl_id, aapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Rget_obj_type3(H5R_ref_t *ref_ptr, hid_t rapl_id,
                              H5O_type_t *obj_type) {
  BRAHMA_UNWRAPPED_FUNC(H5Rget_obj_type3, herr_t, (ref_ptr, rapl_id, obj_type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Rget_file_name(const H5R_ref_t *ref_ptr, char *name,
                               size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Rget_file_name, ssize_t, (ref_ptr, name, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Rget_obj_name(H5R_ref_t *ref_ptr, hid_t rapl_id, char *name,
                              size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Rget_obj_name, ssize_t,
                        (ref_ptr, rapl_id, name, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5Rget_attr_name(const H5R_ref_t *ref_ptr, char *name,
                               size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5Rget_attr_name, ssize_t, (ref_ptr, name, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Rdereference1(hid_t obj_id, H5R_type_t ref_type,
                            const void *ref) {
  BRAHMA_UNWRAPPED_FUNC(H5Rdereference1, hid_t, (obj_id, ref_type, ref));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Rget_obj_type2(hid_t id, H5R_type_t ref_type, const void *ref,
                              H5O_type_t *obj_type) {
  BRAHMA_UNWRAPPED_FUNC(H5Rget_obj_type2, herr_t,
                        (id, ref_type, ref, obj_type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5Rdereference2(hid_t obj_id, hid_t oapl_id, H5R_type_t ref_type,
                            const void *ref) {
  BRAHMA_UNWRAPPED_FUNC(H5Rdereference2, hid_t,
                        (obj_id, oapl_id, ref_type, ref));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5VLregister_connector_by_name(const char *connector_name,
                                           hid_t vipl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLregister_connector_by_name, hid_t,
                        (connector_name, vipl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5VLregister_connector_by_value(H5VL_class_value_t connector_value,
                                            hid_t vipl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLregister_connector_by_value, hid_t,
                        (connector_value, vipl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5VLis_connector_registered_by_name(const char *name) {
  BRAHMA_UNWRAPPED_FUNC(H5VLis_connector_registered_by_name, htri_t, (name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
htri_t HDF5::H5VLis_connector_registered_by_value(
    H5VL_class_value_t connector_value) {
  BRAHMA_UNWRAPPED_FUNC(H5VLis_connector_registered_by_value, htri_t,
                        (connector_value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5VLget_connector_id(hid_t obj_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLget_connector_id, hid_t, (obj_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5VLget_connector_id_by_name(const char *name) {
  BRAHMA_UNWRAPPED_FUNC(H5VLget_connector_id_by_name, hid_t, (name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5VLget_connector_id_by_value(H5VL_class_value_t connector_value) {
  BRAHMA_UNWRAPPED_FUNC(H5VLget_connector_id_by_value, hid_t,
                        (connector_value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
ssize_t HDF5::H5VLget_connector_name(hid_t id, char *name, size_t size) {
  BRAHMA_UNWRAPPED_FUNC(H5VLget_connector_name, ssize_t, (id, name, size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLclose(hid_t connector_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLclose, herr_t, (connector_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLunregister_connector(hid_t connector_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLunregister_connector, herr_t, (connector_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLquery_optional(hid_t obj_id, H5VL_subclass_t subcls,
                                int opt_type, hbool_t *supported) {
  BRAHMA_UNWRAPPED_FUNC(H5VLquery_optional, herr_t,
                        (obj_id, subcls, opt_type, supported));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLobject_is_native(hid_t obj_id, hbool_t *is_native) {
  BRAHMA_UNWRAPPED_FUNC(H5VLobject_is_native, herr_t, (obj_id, is_native));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5VLregister_connector(const H5VL_class_t *cls, hid_t vipl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLregister_connector, hid_t, (cls, vipl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLobject(hid_t obj_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLobject, void *, (obj_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5VLget_file_type(void *file_obj, hid_t connector_id,
                              hid_t dtype_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLget_file_type, hid_t,
                        (file_obj, connector_id, dtype_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5VLpeek_connector_id_by_name(const char *name) {
  BRAHMA_UNWRAPPED_FUNC(H5VLpeek_connector_id_by_name, hid_t, (name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5VLpeek_connector_id_by_value(H5VL_class_value_t value) {
  BRAHMA_UNWRAPPED_FUNC(H5VLpeek_connector_id_by_value, hid_t, (value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLcmp_connector_cls(int *cmp, hid_t connector_id1,
                                   hid_t connector_id2) {
  BRAHMA_UNWRAPPED_FUNC(H5VLcmp_connector_cls, herr_t,
                        (cmp, connector_id1, connector_id2));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5VLwrap_register(void *obj, H5I_type_t type) {
  BRAHMA_UNWRAPPED_FUNC(H5VLwrap_register, hid_t, (obj, type));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLretrieve_lib_state(void **state) {
  BRAHMA_UNWRAPPED_FUNC(H5VLretrieve_lib_state, herr_t, (state));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLrestore_lib_state(const void *state) {
  BRAHMA_UNWRAPPED_FUNC(H5VLrestore_lib_state, herr_t, (state));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLreset_lib_state(void) {
  BRAHMA_UNWRAPPED_FUNC(H5VLreset_lib_state, herr_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLfree_lib_state(void *state) {
  BRAHMA_UNWRAPPED_FUNC(H5VLfree_lib_state, herr_t, (state));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLget_object(void *obj, hid_t connector_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLget_object, void *, (obj, connector_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLget_wrap_ctx(void *obj, hid_t connector_id, void **wrap_ctx) {
  BRAHMA_UNWRAPPED_FUNC(H5VLget_wrap_ctx, herr_t,
                        (obj, connector_id, wrap_ctx));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLwrap_object(void *obj, H5I_type_t obj_type, hid_t connector_id,
                            void *wrap_ctx) {
  BRAHMA_UNWRAPPED_FUNC(H5VLwrap_object, void *,
                        (obj, obj_type, connector_id, wrap_ctx));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLunwrap_object(void *obj, hid_t connector_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLunwrap_object, void *, (obj, connector_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLfree_wrap_ctx(void *wrap_ctx, hid_t connector_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLfree_wrap_ctx, herr_t, (wrap_ctx, connector_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLinitialize(hid_t connector_id, hid_t vipl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLinitialize, herr_t, (connector_id, vipl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLterminate(hid_t connector_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLterminate, herr_t, (connector_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLget_cap_flags(hid_t connector_id, unsigned int *cap_flags) {
  BRAHMA_UNWRAPPED_FUNC(H5VLget_cap_flags, herr_t, (connector_id, cap_flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLget_value(hid_t connector_id, H5VL_class_value_t *conn_value) {
  BRAHMA_UNWRAPPED_FUNC(H5VLget_value, herr_t, (connector_id, conn_value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLcopy_connector_info(hid_t connector_id, void **dst_vol_info,
                                     void *src_vol_info) {
  BRAHMA_UNWRAPPED_FUNC(H5VLcopy_connector_info, herr_t,
                        (connector_id, dst_vol_info, src_vol_info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLcmp_connector_info(int *cmp, hid_t connector_id,
                                    const void *info1, const void *info2) {
  BRAHMA_UNWRAPPED_FUNC(H5VLcmp_connector_info, herr_t,
                        (cmp, connector_id, info1, info2));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLfree_connector_info(hid_t connector_id, void *vol_info) {
  BRAHMA_UNWRAPPED_FUNC(H5VLfree_connector_info, herr_t,
                        (connector_id, vol_info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLconnector_info_to_str(const void *info, hid_t connector_id,
                                       char **str) {
  BRAHMA_UNWRAPPED_FUNC(H5VLconnector_info_to_str, herr_t,
                        (info, connector_id, str));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLconnector_str_to_info(const char *str, hid_t connector_id,
                                       void **info) {
  BRAHMA_UNWRAPPED_FUNC(H5VLconnector_str_to_info, herr_t,
                        (str, connector_id, info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLattr_create(void *obj, const H5VL_loc_params_t *loc_params,
                            hid_t connector_id, const char *attr_name,
                            hid_t type_id, hid_t space_id, hid_t acpl_id,
                            hid_t aapl_id, hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLattr_create, void *,
                        (obj, loc_params, connector_id, attr_name, type_id,
                         space_id, acpl_id, aapl_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLattr_open(void *obj, const H5VL_loc_params_t *loc_params,
                          hid_t connector_id, const char *name, hid_t aapl_id,
                          hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLattr_open, void *,
      (obj, loc_params, connector_id, name, aapl_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLattr_read(void *attr, hid_t connector_id, hid_t dtype_id,
                           void *buf, hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLattr_read, herr_t,
                        (attr, connector_id, dtype_id, buf, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLattr_write(void *attr, hid_t connector_id, hid_t dtype_id,
                            const void *buf, hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLattr_write, herr_t,
                        (attr, connector_id, dtype_id, buf, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLattr_get(void *obj, hid_t connector_id,
                          H5VL_attr_get_t get_type, hid_t dxpl_id, void **req,
                          va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLattr_get, herr_t,
                        (obj, connector_id, get_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLattr_specific(void *obj, const H5VL_loc_params_t *loc_params,
                               hid_t connector_id,
                               H5VL_attr_specific_t specific_type,
                               hid_t dxpl_id, void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLattr_specific, herr_t,
      (obj, loc_params, connector_id, specific_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLattr_optional(void *obj, hid_t connector_id,
                               H5VL_attr_optional_t opt_type, hid_t dxpl_id,
                               void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLattr_optional, herr_t,
                        (obj, connector_id, opt_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLattr_close(void *attr, hid_t connector_id, hid_t dxpl_id,
                            void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLattr_close, herr_t,
                        (attr, connector_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLdataset_create(void *obj, const H5VL_loc_params_t *loc_params,
                               hid_t connector_id, const char *name,
                               hid_t lcpl_id, hid_t type_id, hid_t space_id,
                               hid_t dcpl_id, hid_t dapl_id, hid_t dxpl_id,
                               void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdataset_create, void *,
                        (obj, loc_params, connector_id, name, lcpl_id, type_id,
                         space_id, dcpl_id, dapl_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLdataset_open(void *obj, const H5VL_loc_params_t *loc_params,
                             hid_t connector_id, const char *name,
                             hid_t dapl_id, hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLdataset_open, void *,
      (obj, loc_params, connector_id, name, dapl_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLdataset_read(void *dset, hid_t connector_id, hid_t mem_type_id,
                              hid_t mem_space_id, hid_t file_space_id,
                              hid_t plist_id, void *buf, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdataset_read, herr_t,
                        (dset, connector_id, mem_type_id, mem_space_id,
                         file_space_id, plist_id, buf, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLdataset_write(void *dset, hid_t connector_id,
                               hid_t mem_type_id, hid_t mem_space_id,
                               hid_t file_space_id, hid_t plist_id,
                               const void *buf, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdataset_write, herr_t,
                        (dset, connector_id, mem_type_id, mem_space_id,
                         file_space_id, plist_id, buf, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLdataset_get(void *dset, hid_t connector_id,
                             H5VL_dataset_get_t get_type, hid_t dxpl_id,
                             void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLdataset_get, herr_t,
      (dset, connector_id, get_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLdataset_specific(void *obj, hid_t connector_id,
                                  H5VL_dataset_specific_t specific_type,
                                  hid_t dxpl_id, void **req,
                                  va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLdataset_specific, herr_t,
      (obj, connector_id, specific_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLdataset_optional(void *obj, hid_t connector_id,
                                  H5VL_dataset_optional_t opt_type,
                                  hid_t dxpl_id, void **req,
                                  va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdataset_optional, herr_t,
                        (obj, connector_id, opt_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLdataset_close(void *dset, hid_t connector_id, hid_t dxpl_id,
                               void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdataset_close, herr_t,
                        (dset, connector_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLdatatype_commit(void *obj, const H5VL_loc_params_t *loc_params,
                                hid_t connector_id, const char *name,
                                hid_t type_id, hid_t lcpl_id, hid_t tcpl_id,
                                hid_t tapl_id, hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdatatype_commit, void *,
                        (obj, loc_params, connector_id, name, type_id, lcpl_id,
                         tcpl_id, tapl_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLdatatype_open(void *obj, const H5VL_loc_params_t *loc_params,
                              hid_t connector_id, const char *name,
                              hid_t tapl_id, hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLdatatype_open, void *,
      (obj, loc_params, connector_id, name, tapl_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLdatatype_get(void *dt, hid_t connector_id,
                              H5VL_datatype_get_t get_type, hid_t dxpl_id,
                              void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdatatype_get, herr_t,
                        (dt, connector_id, get_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLdatatype_specific(void *obj, hid_t connector_id,
                                   H5VL_datatype_specific_t specific_type,
                                   hid_t dxpl_id, void **req,
                                   va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLdatatype_specific, herr_t,
      (obj, connector_id, specific_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLdatatype_optional(void *obj, hid_t connector_id,
                                   H5VL_datatype_optional_t opt_type,
                                   hid_t dxpl_id, void **req,
                                   va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdatatype_optional, herr_t,
                        (obj, connector_id, opt_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLdatatype_close(void *dt, hid_t connector_id, hid_t dxpl_id,
                                void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdatatype_close, herr_t,
                        (dt, connector_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLfile_create(const char *name, unsigned int flags, hid_t fcpl_id,
                            hid_t fapl_id, hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLfile_create, void *,
                        (name, flags, fcpl_id, fapl_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLfile_open(const char *name, unsigned int flags, hid_t fapl_id,
                          hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLfile_open, void *,
                        (name, flags, fapl_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLfile_get(void *file, hid_t connector_id,
                          H5VL_file_get_t get_type, hid_t dxpl_id, void **req,
                          va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLfile_get, herr_t,
      (file, connector_id, get_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLfile_specific(void *obj, hid_t connector_id,
                               H5VL_file_specific_t specific_type,
                               hid_t dxpl_id, void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLfile_specific, herr_t,
      (obj, connector_id, specific_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLfile_optional(void *obj, hid_t connector_id,
                               H5VL_file_optional_t opt_type, hid_t dxpl_id,
                               void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLfile_optional, herr_t,
                        (obj, connector_id, opt_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLfile_close(void *file, hid_t connector_id, hid_t dxpl_id,
                            void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLfile_close, herr_t,
                        (file, connector_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLgroup_create(void *obj, const H5VL_loc_params_t *loc_params,
                             hid_t connector_id, const char *name,
                             hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id,
                             hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLgroup_create, void *,
                        (obj, loc_params, connector_id, name, lcpl_id, gcpl_id,
                         gapl_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLgroup_open(void *obj, const H5VL_loc_params_t *loc_params,
                           hid_t connector_id, const char *name, hid_t gapl_id,
                           hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLgroup_open, void *,
      (obj, loc_params, connector_id, name, gapl_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLgroup_get(void *obj, hid_t connector_id,
                           H5VL_group_get_t get_type, hid_t dxpl_id, void **req,
                           va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLgroup_get, herr_t,
                        (obj, connector_id, get_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLgroup_specific(void *obj, hid_t connector_id,
                                H5VL_group_specific_t specific_type,
                                hid_t dxpl_id, void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLgroup_specific, herr_t,
      (obj, connector_id, specific_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLgroup_optional(void *obj, hid_t connector_id,
                                H5VL_group_optional_t opt_type, hid_t dxpl_id,
                                void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLgroup_optional, herr_t,
                        (obj, connector_id, opt_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLgroup_close(void *grp, hid_t connector_id, hid_t dxpl_id,
                             void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLgroup_close, herr_t,
                        (grp, connector_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLlink_create(H5VL_link_create_type_t create_type, void *obj,
                             const H5VL_loc_params_t *loc_params,
                             hid_t connector_id, hid_t lcpl_id, hid_t lapl_id,
                             hid_t dxpl_id, void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLlink_create, herr_t,
                        (create_type, obj, loc_params, connector_id, lcpl_id,
                         lapl_id, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLlink_copy(void *src_obj, const H5VL_loc_params_t *loc_params1,
                           void *dst_obj, const H5VL_loc_params_t *loc_params2,
                           hid_t connector_id, hid_t lcpl_id, hid_t lapl_id,
                           hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLlink_copy, herr_t,
                        (src_obj, loc_params1, dst_obj, loc_params2,
                         connector_id, lcpl_id, lapl_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLlink_move(void *src_obj, const H5VL_loc_params_t *loc_params1,
                           void *dst_obj, const H5VL_loc_params_t *loc_params2,
                           hid_t connector_id, hid_t lcpl_id, hid_t lapl_id,
                           hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLlink_move, herr_t,
                        (src_obj, loc_params1, dst_obj, loc_params2,
                         connector_id, lcpl_id, lapl_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLlink_get(void *obj, const H5VL_loc_params_t *loc_params,
                          hid_t connector_id, H5VL_link_get_t get_type,
                          hid_t dxpl_id, void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLlink_get, herr_t,
      (obj, loc_params, connector_id, get_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLlink_specific(void *obj, const H5VL_loc_params_t *loc_params,
                               hid_t connector_id,
                               H5VL_link_specific_t specific_type,
                               hid_t dxpl_id, void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLlink_specific, herr_t,
      (obj, loc_params, connector_id, specific_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLlink_optional(void *obj, hid_t connector_id,
                               H5VL_link_optional_t opt_type, hid_t dxpl_id,
                               void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLlink_optional, herr_t,
                        (obj, connector_id, opt_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
void *HDF5::H5VLobject_open(void *obj, const H5VL_loc_params_t *loc_params,
                            hid_t connector_id, H5I_type_t *opened_type,
                            hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLobject_open, void *,
      (obj, loc_params, connector_id, opened_type, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLobject_copy(void *src_obj,
                             const H5VL_loc_params_t *loc_params1,
                             const char *src_name, void *dst_obj,
                             const H5VL_loc_params_t *loc_params2,
                             const char *dst_name, hid_t connector_id,
                             hid_t ocpypl_id, hid_t lcpl_id, hid_t dxpl_id,
                             void **req) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLobject_copy, herr_t,
      (src_obj, loc_params1, src_name, dst_obj, loc_params2, dst_name,
       connector_id, ocpypl_id, lcpl_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLobject_get(void *obj, const H5VL_loc_params_t *loc_params,
                            hid_t connector_id, H5VL_object_get_t get_type,
                            hid_t dxpl_id, void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLobject_get, herr_t,
      (obj, loc_params, connector_id, get_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLobject_specific(void *obj, const H5VL_loc_params_t *loc_params,
                                 hid_t connector_id,
                                 H5VL_object_specific_t specific_type,
                                 hid_t dxpl_id, void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLobject_specific, herr_t,
      (obj, loc_params, connector_id, specific_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLobject_optional(void *obj, hid_t connector_id,
                                 H5VL_object_optional_t opt_type, hid_t dxpl_id,
                                 void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLobject_optional, herr_t,
                        (obj, connector_id, opt_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLintrospect_get_conn_cls(void *obj, hid_t connector_id,
                                         H5VL_get_conn_lvl_t lvl,
                                         const H5VL_class_t **conn_cls) {
  BRAHMA_UNWRAPPED_FUNC(H5VLintrospect_get_conn_cls, herr_t,
                        (obj, connector_id, lvl, conn_cls));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLintrospect_opt_query(void *obj, hid_t connector_id,
                                      H5VL_subclass_t subcls, int opt_type,
                                      hbool_t *supported) {
  BRAHMA_UNWRAPPED_FUNC(H5VLintrospect_opt_query, herr_t,
                        (obj, connector_id, subcls, opt_type, supported));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLrequest_wait(void *req, hid_t connector_id, uint64_t timeout,
                              H5ES_status_t *status) {
  BRAHMA_UNWRAPPED_FUNC(H5VLrequest_wait, herr_t,
                        (req, connector_id, timeout, status));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLrequest_notify(void *req, hid_t connector_id,
                                H5VL_request_notify_t cb, void *ctx) {
  BRAHMA_UNWRAPPED_FUNC(H5VLrequest_notify, herr_t,
                        (req, connector_id, cb, ctx));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLrequest_cancel(void *req, hid_t connector_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLrequest_cancel, herr_t, (req, connector_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLrequest_specific(void *req, hid_t connector_id,
                                  H5VL_request_specific_t specific_type,
                                  va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLrequest_specific, herr_t,
                        (req, connector_id, specific_type, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLrequest_optional(void *req, hid_t connector_id,
                                  H5VL_request_optional_t opt_type,
                                  va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLrequest_optional, herr_t,
                        (req, connector_id, opt_type, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLrequest_free(void *req, hid_t connector_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLrequest_free, herr_t, (req, connector_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLblob_put(void *obj, hid_t connector_id, const void *buf,
                          size_t size, void *blob_id, void *ctx) {
  BRAHMA_UNWRAPPED_FUNC(H5VLblob_put, herr_t,
                        (obj, connector_id, buf, size, blob_id, ctx));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLblob_get(void *obj, hid_t connector_id, const void *blob_id,
                          void *buf, size_t size, void *ctx) {
  BRAHMA_UNWRAPPED_FUNC(H5VLblob_get, herr_t,
                        (obj, connector_id, blob_id, buf, size, ctx));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLblob_specific(void *obj, hid_t connector_id, void *blob_id,
                               H5VL_blob_specific_t specific_type,
                               va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLblob_specific, herr_t,
                        (obj, connector_id, blob_id, specific_type, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLblob_optional(void *obj, hid_t connector_id, void *blob_id,
                               H5VL_blob_optional_t opt_type,
                               va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLblob_optional, herr_t,
                        (obj, connector_id, blob_id, opt_type, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLtoken_cmp(void *obj, hid_t connector_id,
                           const H5O_token_t *token1, const H5O_token_t *token2,
                           int *cmp_value) {
  BRAHMA_UNWRAPPED_FUNC(H5VLtoken_cmp, herr_t,
                        (obj, connector_id, token1, token2, cmp_value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLtoken_to_str(void *obj, H5I_type_t obj_type,
                              hid_t connector_id, const H5O_token_t *token,
                              char **token_str) {
  BRAHMA_UNWRAPPED_FUNC(H5VLtoken_to_str, herr_t,
                        (obj, obj_type, connector_id, token, token_str));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLtoken_from_str(void *obj, H5I_type_t obj_type,
                                hid_t connector_id, const char *token_str,
                                H5O_token_t *token) {
  BRAHMA_UNWRAPPED_FUNC(H5VLtoken_from_str, herr_t,
                        (obj, obj_type, connector_id, token_str, token));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200
herr_t HDF5::H5VLoptional(void *obj, hid_t connector_id, int op_type,
                          hid_t dxpl_id, void **req, va_list arguments) {
  BRAHMA_UNWRAPPED_FUNC(H5VLoptional, herr_t,
                        (obj, connector_id, op_type, dxpl_id, req, arguments));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLnative_addr_to_token(hid_t loc_id, haddr_t addr,
                                      H5O_token_t *token) {
  BRAHMA_UNWRAPPED_FUNC(H5VLnative_addr_to_token, herr_t,
                        (loc_id, addr, token));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5VLnative_token_to_addr(hid_t loc_id, H5O_token_t token,
                                      haddr_t *addr) {
  BRAHMA_UNWRAPPED_FUNC(H5VLnative_token_to_addr, herr_t,
                        (loc_id, token, addr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5VL_native_register(void) {
  BRAHMA_UNWRAPPED_FUNC(H5VL_native_register, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5FD_splitter_init(void) {
  BRAHMA_UNWRAPPED_FUNC(H5FD_splitter_init, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pset_fapl_splitter(hid_t fapl_id,
                                  H5FD_splitter_vfd_config_t *config_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_fapl_splitter, herr_t, (fapl_id, config_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
herr_t HDF5::H5Pget_fapl_splitter(hid_t fapl_id,
                                  H5FD_splitter_vfd_config_t *config_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_fapl_splitter, herr_t, (fapl_id, config_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101200 && BRAHMA_HDF5_VERSION <= 101400
hid_t HDF5::H5VL_pass_through_register(void) {
  BRAHMA_UNWRAPPED_FUNC(H5VL_pass_through_register, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5atclose(H5_atclose_func_t func, void *ctx) {
  BRAHMA_UNWRAPPED_FUNC(H5atclose, herr_t, (func, ctx));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5is_library_terminating(hbool_t *is_terminating) {
  BRAHMA_UNWRAPPED_FUNC(H5is_library_terminating, herr_t, (is_terminating));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Oopen_async(const char *app_file, const char *app_func,
                          unsigned int app_line, hid_t loc_id, const char *name,
                          hid_t lapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Oopen_async, hid_t,
      (app_file, app_func, app_line, loc_id, name, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Oopen_by_idx_async(const char *app_file, const char *app_func,
                                 unsigned int app_line, hid_t loc_id,
                                 const char *group_name, H5_index_t idx_type,
                                 H5_iter_order_t order, hsize_t n,
                                 hid_t lapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oopen_by_idx_async, hid_t,
                        (app_file, app_func, app_line, loc_id, group_name,
                         idx_type, order, n, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Oget_info_by_name_async(const char *app_file,
                                       const char *app_func,
                                       unsigned int app_line, hid_t loc_id,
                                       const char *name, H5O_info2_t *oinfo,
                                       unsigned int fields, hid_t lapl_id,
                                       hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oget_info_by_name_async, herr_t,
                        (app_file, app_func, app_line, loc_id, name, oinfo,
                         fields, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Ocopy_async(const char *app_file, const char *app_func,
                           unsigned int app_line, hid_t src_loc_id,
                           const char *src_name, hid_t dst_loc_id,
                           const char *dst_name, hid_t ocpypl_id, hid_t lcpl_id,
                           hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Ocopy_async, herr_t,
                        (app_file, app_func, app_line, src_loc_id, src_name,
                         dst_loc_id, dst_name, ocpypl_id, lcpl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Oclose_async(const char *app_file, const char *app_func,
                            unsigned int app_line, hid_t object_id,
                            hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oclose_async, herr_t,
                        (app_file, app_func, app_line, object_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Oflush_async(const char *app_file, const char *app_func,
                            unsigned int app_line, hid_t obj_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Oflush_async, herr_t,
                        (app_file, app_func, app_line, obj_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Orefresh_async(const char *app_file, const char *app_func,
                              unsigned int app_line, hid_t oid, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Orefresh_async, herr_t,
                        (app_file, app_func, app_line, oid, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Tclose_async(const char *app_file, const char *app_func,
                            unsigned int app_line, hid_t type_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tclose_async, herr_t,
                        (app_file, app_func, app_line, type_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Tcommit_async(const char *app_file, const char *app_func,
                             unsigned int app_line, hid_t loc_id,
                             const char *name, hid_t type_id, hid_t lcpl_id,
                             hid_t tcpl_id, hid_t tapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Tcommit_async, herr_t,
                        (app_file, app_func, app_line, loc_id, name, type_id,
                         lcpl_id, tcpl_id, tapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Topen_async(const char *app_file, const char *app_func,
                          unsigned int app_line, hid_t loc_id, const char *name,
                          hid_t tapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Topen_async, hid_t,
      (app_file, app_func, app_line, loc_id, name, tapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Aclose_async(const char *app_file, const char *app_func,
                            unsigned int app_line, hid_t attr_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aclose_async, herr_t,
                        (app_file, app_func, app_line, attr_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Acreate_async(const char *app_file, const char *app_func,
                            unsigned int app_line, hid_t loc_id,
                            const char *attr_name, hid_t type_id,
                            hid_t space_id, hid_t acpl_id, hid_t aapl_id,
                            hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Acreate_async, hid_t,
                        (app_file, app_func, app_line, loc_id, attr_name,
                         type_id, space_id, acpl_id, aapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Acreate_by_name_async(const char *app_file, const char *app_func,
                                    unsigned int app_line, hid_t loc_id,
                                    const char *obj_name, const char *attr_name,
                                    hid_t type_id, hid_t space_id,
                                    hid_t acpl_id, hid_t aapl_id, hid_t lapl_id,
                                    hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Acreate_by_name_async, hid_t,
      (app_file, app_func, app_line, loc_id, obj_name, attr_name, type_id,
       space_id, acpl_id, aapl_id, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Aexists_async(const char *app_file, const char *app_func,
                             unsigned int app_line, hid_t obj_id,
                             const char *attr_name, hbool_t *exists,
                             hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Aexists_async, herr_t,
      (app_file, app_func, app_line, obj_id, attr_name, exists, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Aexists_by_name_async(const char *app_file, const char *app_func,
                                     unsigned int app_line, hid_t loc_id,
                                     const char *obj_name,
                                     const char *attr_name, hbool_t *exists,
                                     hid_t lapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aexists_by_name_async, herr_t,
                        (app_file, app_func, app_line, loc_id, obj_name,
                         attr_name, exists, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Aopen_async(const char *app_file, const char *app_func,
                          unsigned int app_line, hid_t obj_id,
                          const char *attr_name, hid_t aapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Aopen_async, hid_t,
      (app_file, app_func, app_line, obj_id, attr_name, aapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Aopen_by_idx_async(const char *app_file, const char *app_func,
                                 unsigned int app_line, hid_t loc_id,
                                 const char *obj_name, H5_index_t idx_type,
                                 H5_iter_order_t order, hsize_t n,
                                 hid_t aapl_id, hid_t lapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aopen_by_idx_async, hid_t,
                        (app_file, app_func, app_line, loc_id, obj_name,
                         idx_type, order, n, aapl_id, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Aopen_by_name_async(const char *app_file, const char *app_func,
                                  unsigned int app_line, hid_t loc_id,
                                  const char *obj_name, const char *attr_name,
                                  hid_t aapl_id, hid_t lapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Aopen_by_name_async, hid_t,
                        (app_file, app_func, app_line, loc_id, obj_name,
                         attr_name, aapl_id, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Aread_async(const char *app_file, const char *app_func,
                           unsigned int app_line, hid_t attr_id, hid_t dtype_id,
                           void *buf, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Aread_async, herr_t,
      (app_file, app_func, app_line, attr_id, dtype_id, buf, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Arename_async(const char *app_file, const char *app_func,
                             unsigned int app_line, hid_t loc_id,
                             const char *old_name, const char *new_name,
                             hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Arename_async, herr_t,
      (app_file, app_func, app_line, loc_id, old_name, new_name, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Arename_by_name_async(const char *app_file, const char *app_func,
                                     unsigned int app_line, hid_t loc_id,
                                     const char *obj_name,
                                     const char *old_attr_name,
                                     const char *new_attr_name, hid_t lapl_id,
                                     hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Arename_by_name_async, herr_t,
                        (app_file, app_func, app_line, loc_id, obj_name,
                         old_attr_name, new_attr_name, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Awrite_async(const char *app_file, const char *app_func,
                            unsigned int app_line, hid_t attr_id, hid_t type_id,
                            const void *buf, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Awrite_async, herr_t,
      (app_file, app_func, app_line, attr_id, type_id, buf, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Dcreate_async(const char *app_file, const char *app_func,
                            unsigned int app_line, hid_t loc_id,
                            const char *name, hid_t type_id, hid_t space_id,
                            hid_t lcpl_id, hid_t dcpl_id, hid_t dapl_id,
                            hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dcreate_async, hid_t,
                        (app_file, app_func, app_line, loc_id, name, type_id,
                         space_id, lcpl_id, dcpl_id, dapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Dopen_async(const char *app_file, const char *app_func,
                          unsigned int app_line, hid_t loc_id, const char *name,
                          hid_t dapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Dopen_async, hid_t,
      (app_file, app_func, app_line, loc_id, name, dapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Dget_space_async(const char *app_file, const char *app_func,
                               unsigned int app_line, hid_t dset_id,
                               hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dget_space_async, hid_t,
                        (app_file, app_func, app_line, dset_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Dchunk_iter(hid_t dset_id, hid_t dxpl_id, H5D_chunk_iter_op_t cb,
                           void *op_data) {
  BRAHMA_UNWRAPPED_FUNC(H5Dchunk_iter, herr_t, (dset_id, dxpl_id, cb, op_data));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Dread_multi(size_t count, hid_t dset_id[], hid_t mem_type_id[],
                           hid_t mem_space_id[], hid_t file_space_id[],
                           hid_t dxpl_id, void *buf[]) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Dread_multi, herr_t,
      (count, dset_id, mem_type_id, mem_space_id, file_space_id, dxpl_id, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Dread_async(const char *app_file, const char *app_func,
                           unsigned int app_line, hid_t dset_id,
                           hid_t mem_type_id, hid_t mem_space_id,
                           hid_t file_space_id, hid_t dxpl_id, void *buf,
                           hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dread_async, herr_t,
                        (app_file, app_func, app_line, dset_id, mem_type_id,
                         mem_space_id, file_space_id, dxpl_id, buf, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Dread_multi_async(const char *app_file, const char *app_func,
                                 unsigned int app_line, size_t count,
                                 hid_t dset_id[], hid_t mem_type_id[],
                                 hid_t mem_space_id[], hid_t file_space_id[],
                                 hid_t dxpl_id, void *buf[], hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Dread_multi_async, herr_t,
      (app_file, app_func, app_line, count, dset_id, mem_type_id, mem_space_id,
       file_space_id, dxpl_id, buf, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Dwrite_multi(size_t count, hid_t dset_id[], hid_t mem_type_id[],
                            hid_t mem_space_id[], hid_t file_space_id[],
                            hid_t dxpl_id, const void *buf[]) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Dwrite_multi, herr_t,
      (count, dset_id, mem_type_id, mem_space_id, file_space_id, dxpl_id, buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Dwrite_async(const char *app_file, const char *app_func,
                            unsigned int app_line, hid_t dset_id,
                            hid_t mem_type_id, hid_t mem_space_id,
                            hid_t file_space_id, hid_t dxpl_id, const void *buf,
                            hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dwrite_async, herr_t,
                        (app_file, app_func, app_line, dset_id, mem_type_id,
                         mem_space_id, file_space_id, dxpl_id, buf, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Dwrite_multi_async(const char *app_file, const char *app_func,
                                  unsigned int app_line, size_t count,
                                  hid_t dset_id[], hid_t mem_type_id[],
                                  hid_t mem_space_id[], hid_t file_space_id[],
                                  hid_t dxpl_id, const void *buf[],
                                  hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Dwrite_multi_async, herr_t,
      (app_file, app_func, app_line, count, dset_id, mem_type_id, mem_space_id,
       file_space_id, dxpl_id, buf, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Dset_extent_async(const char *app_file, const char *app_func,
                                 unsigned int app_line, hid_t dset_id,
                                 const hsize_t size[], hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dset_extent_async, herr_t,
                        (app_file, app_func, app_line, dset_id, size, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Dclose_async(const char *app_file, const char *app_func,
                            unsigned int app_line, hid_t dset_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Dclose_async, herr_t,
                        (app_file, app_func, app_line, dset_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5EScreate(void) {
  BRAHMA_UNWRAPPED_FUNC(H5EScreate, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5ESwait(hid_t es_id, uint64_t timeout, size_t *num_in_progress,
                      hbool_t *err_occurred) {
  BRAHMA_UNWRAPPED_FUNC(H5ESwait, herr_t,
                        (es_id, timeout, num_in_progress, err_occurred));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5EScancel(hid_t es_id, size_t *num_not_canceled,
                        hbool_t *err_occurred) {
  BRAHMA_UNWRAPPED_FUNC(H5EScancel, herr_t,
                        (es_id, num_not_canceled, err_occurred));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5ESget_count(hid_t es_id, size_t *count) {
  BRAHMA_UNWRAPPED_FUNC(H5ESget_count, herr_t, (es_id, count));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5ESget_op_counter(hid_t es_id, uint64_t *counter) {
  BRAHMA_UNWRAPPED_FUNC(H5ESget_op_counter, herr_t, (es_id, counter));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5ESget_err_status(hid_t es_id, hbool_t *err_occurred) {
  BRAHMA_UNWRAPPED_FUNC(H5ESget_err_status, herr_t, (es_id, err_occurred));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5ESget_err_count(hid_t es_id, size_t *num_errs) {
  BRAHMA_UNWRAPPED_FUNC(H5ESget_err_count, herr_t, (es_id, num_errs));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5ESget_err_info(hid_t es_id, size_t num_err_info,
                              H5ES_err_info_t err_info[], size_t *err_cleared) {
  BRAHMA_UNWRAPPED_FUNC(H5ESget_err_info, herr_t,
                        (es_id, num_err_info, err_info, err_cleared));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5ESfree_err_info(size_t num_err_info,
                               H5ES_err_info_t err_info[]) {
  BRAHMA_UNWRAPPED_FUNC(H5ESfree_err_info, herr_t, (num_err_info, err_info));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5ESregister_insert_func(hid_t es_id,
                                      H5ES_event_insert_func_t func,
                                      void *ctx) {
  BRAHMA_UNWRAPPED_FUNC(H5ESregister_insert_func, herr_t, (es_id, func, ctx));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5ESregister_complete_func(hid_t es_id,
                                        H5ES_event_complete_func_t func,
                                        void *ctx) {
  BRAHMA_UNWRAPPED_FUNC(H5ESregister_complete_func, herr_t, (es_id, func, ctx));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5ESclose(hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5ESclose, herr_t, (es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Fcreate_async(const char *app_file, const char *app_func,
                            unsigned int app_line, const char *filename,
                            unsigned int flags, hid_t fcpl_id, hid_t fapl_id,
                            hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Fcreate_async, hid_t,
      (app_file, app_func, app_line, filename, flags, fcpl_id, fapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Fopen_async(const char *app_file, const char *app_func,
                          unsigned int app_line, const char *filename,
                          unsigned int flags, hid_t access_plist, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Fopen_async, hid_t,
      (app_file, app_func, app_line, filename, flags, access_plist, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Freopen_async(const char *app_file, const char *app_func,
                            unsigned int app_line, hid_t file_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Freopen_async, hid_t,
                        (app_file, app_func, app_line, file_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Fflush_async(const char *app_file, const char *app_func,
                            unsigned int app_line, hid_t object_id,
                            H5F_scope_t scope, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Fflush_async, herr_t,
      (app_file, app_func, app_line, object_id, scope, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Fclose_async(const char *app_file, const char *app_func,
                            unsigned int app_line, hid_t file_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Fclose_async, herr_t,
                        (app_file, app_func, app_line, file_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Fset_mdc_config(hid_t file_id,
                               const H5AC_cache_config_t *config_ptr) {
  BRAHMA_UNWRAPPED_FUNC(H5Fset_mdc_config, herr_t, (file_id, config_ptr));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Lcreate_hard_async(const char *app_file, const char *app_func,
                                  unsigned int app_line, hid_t cur_loc_id,
                                  const char *cur_name, hid_t new_loc_id,
                                  const char *new_name, hid_t lcpl_id,
                                  hid_t lapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Lcreate_hard_async, herr_t,
                        (app_file, app_func, app_line, cur_loc_id, cur_name,
                         new_loc_id, new_name, lcpl_id, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Lcreate_soft_async(const char *app_file, const char *app_func,
                                  unsigned int app_line,
                                  const char *link_target, hid_t link_loc_id,
                                  const char *link_name, hid_t lcpl_id,
                                  hid_t lapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Lcreate_soft_async, herr_t,
                        (app_file, app_func, app_line, link_target, link_loc_id,
                         link_name, lcpl_id, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Ldelete_async(const char *app_file, const char *app_func,
                             unsigned int app_line, hid_t loc_id,
                             const char *name, hid_t lapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Ldelete_async, herr_t,
      (app_file, app_func, app_line, loc_id, name, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Ldelete_by_idx_async(const char *app_file, const char *app_func,
                                    unsigned int app_line, hid_t loc_id,
                                    const char *group_name, H5_index_t idx_type,
                                    H5_iter_order_t order, hsize_t n,
                                    hid_t lapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Ldelete_by_idx_async, herr_t,
                        (app_file, app_func, app_line, loc_id, group_name,
                         idx_type, order, n, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Lexists_async(const char *app_file, const char *app_func,
                             unsigned int app_line, hid_t loc_id,
                             const char *name, hbool_t *exists, hid_t lapl_id,
                             hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Lexists_async, herr_t,
      (app_file, app_func, app_line, loc_id, name, exists, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Literate_async(const char *app_file, const char *app_func,
                              unsigned int app_line, hid_t group_id,
                              H5_index_t idx_type, H5_iter_order_t order,
                              hsize_t *idx_p, H5L_iterate2_t op, void *op_data,
                              hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Literate_async, herr_t,
                        (app_file, app_func, app_line, group_id, idx_type,
                         order, idx_p, op, op_data, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Gcreate_async(const char *app_file, const char *app_func,
                            unsigned int app_line, hid_t loc_id,
                            const char *name, hid_t lcpl_id, hid_t gcpl_id,
                            hid_t gapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Gcreate_async, hid_t,
                        (app_file, app_func, app_line, loc_id, name, lcpl_id,
                         gcpl_id, gapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Gopen_async(const char *app_file, const char *app_func,
                          unsigned int app_line, hid_t loc_id, const char *name,
                          hid_t gapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Gopen_async, hid_t,
      (app_file, app_func, app_line, loc_id, name, gapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Gget_info_async(const char *app_file, const char *app_func,
                               unsigned int app_line, hid_t loc_id,
                               H5G_info_t *ginfo, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Gget_info_async, herr_t,
                        (app_file, app_func, app_line, loc_id, ginfo, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Gget_info_by_name_async(const char *app_file,
                                       const char *app_func,
                                       unsigned int app_line, hid_t loc_id,
                                       const char *name, H5G_info_t *ginfo,
                                       hid_t lapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Gget_info_by_name_async, herr_t,
      (app_file, app_func, app_line, loc_id, name, ginfo, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Gget_info_by_idx_async(
    const char *app_file, const char *app_func, unsigned int app_line,
    hid_t loc_id, const char *group_name, H5_index_t idx_type,
    H5_iter_order_t order, hsize_t n, H5G_info_t *ginfo, hid_t lapl_id,
    hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Gget_info_by_idx_async, herr_t,
                        (app_file, app_func, app_line, loc_id, group_name,
                         idx_type, order, n, ginfo, lapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Gclose_async(const char *app_file, const char *app_func,
                            unsigned int app_line, hid_t group_id,
                            hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5Gclose_async, herr_t,
                        (app_file, app_func, app_line, group_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLquery_optional(hid_t obj_id, H5VL_subclass_t subcls,
                                int opt_type, uint64_t *flags) {
  BRAHMA_UNWRAPPED_FUNC(H5VLquery_optional, herr_t,
                        (obj_id, subcls, opt_type, flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Ropen_object_async(const char *app_file, const char *app_func,
                                 unsigned int app_line, H5R_ref_t *ref_ptr,
                                 hid_t rapl_id, hid_t oapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Ropen_object_async, hid_t,
      (app_file, app_func, app_line, ref_ptr, rapl_id, oapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Ropen_region_async(const char *app_file, const char *app_func,
                                 unsigned int app_line, H5R_ref_t *ref_ptr,
                                 hid_t rapl_id, hid_t oapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Ropen_region_async, hid_t,
      (app_file, app_func, app_line, ref_ptr, rapl_id, oapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Ropen_attr_async(const char *app_file, const char *app_func,
                               unsigned int app_line, H5R_ref_t *ref_ptr,
                               hid_t rapl_id, hid_t aapl_id, hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Ropen_attr_async, hid_t,
      (app_file, app_func, app_line, ref_ptr, rapl_id, aapl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLregister_opt_operation(H5VL_subclass_t subcls,
                                        const char *op_name, int *op_val) {
  BRAHMA_UNWRAPPED_FUNC(H5VLregister_opt_operation, herr_t,
                        (subcls, op_name, op_val));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLfind_opt_operation(H5VL_subclass_t subcls, const char *op_name,
                                    int *op_val) {
  BRAHMA_UNWRAPPED_FUNC(H5VLfind_opt_operation, herr_t,
                        (subcls, op_name, op_val));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLunregister_opt_operation(H5VL_subclass_t subcls,
                                          const char *op_name) {
  BRAHMA_UNWRAPPED_FUNC(H5VLunregister_opt_operation, herr_t,
                        (subcls, op_name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLattr_optional_op(const char *app_file, const char *app_func,
                                  unsigned int app_line, hid_t attr_id,
                                  H5VL_optional_args_t *args, hid_t dxpl_id,
                                  hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLattr_optional_op, herr_t,
      (app_file, app_func, app_line, attr_id, args, dxpl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLdataset_optional_op(const char *app_file, const char *app_func,
                                     unsigned int app_line, hid_t dset_id,
                                     H5VL_optional_args_t *args, hid_t dxpl_id,
                                     hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLdataset_optional_op, herr_t,
      (app_file, app_func, app_line, dset_id, args, dxpl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLdatatype_optional_op(const char *app_file,
                                      const char *app_func,
                                      unsigned int app_line, hid_t type_id,
                                      H5VL_optional_args_t *args, hid_t dxpl_id,
                                      hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLdatatype_optional_op, herr_t,
      (app_file, app_func, app_line, type_id, args, dxpl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLfile_optional_op(const char *app_file, const char *app_func,
                                  unsigned int app_line, hid_t file_id,
                                  H5VL_optional_args_t *args, hid_t dxpl_id,
                                  hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLfile_optional_op, herr_t,
      (app_file, app_func, app_line, file_id, args, dxpl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLgroup_optional_op(const char *app_file, const char *app_func,
                                   unsigned int app_line, hid_t group_id,
                                   H5VL_optional_args_t *args, hid_t dxpl_id,
                                   hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLgroup_optional_op, herr_t,
      (app_file, app_func, app_line, group_id, args, dxpl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLlink_optional_op(const char *app_file, const char *app_func,
                                  unsigned int app_line, hid_t loc_id,
                                  const char *name, hid_t lapl_id,
                                  H5VL_optional_args_t *args, hid_t dxpl_id,
                                  hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLlink_optional_op, herr_t,
                        (app_file, app_func, app_line, loc_id, name, lapl_id,
                         args, dxpl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLobject_optional_op(const char *app_file, const char *app_func,
                                    unsigned int app_line, hid_t loc_id,
                                    const char *name, hid_t lapl_id,
                                    H5VL_optional_args_t *args, hid_t dxpl_id,
                                    hid_t es_id) {
  BRAHMA_UNWRAPPED_FUNC(H5VLobject_optional_op, herr_t,
                        (app_file, app_func, app_line, loc_id, name, lapl_id,
                         args, dxpl_id, es_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLrequest_optional_op(void *req, hid_t connector_id,
                                     H5VL_optional_args_t *args) {
  BRAHMA_UNWRAPPED_FUNC(H5VLrequest_optional_op, herr_t,
                        (req, connector_id, args));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Ssel_iter_get_seq_list(hid_t sel_iter_id, size_t maxseq,
                                      size_t maxelmts, size_t *nseq,
                                      size_t *nelmts, hsize_t *off,
                                      size_t *len) {
  BRAHMA_UNWRAPPED_FUNC(
      H5Ssel_iter_get_seq_list, herr_t,
      (sel_iter_id, maxseq, maxelmts, nseq, nelmts, off, len));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
ssize_t HDF5::H5Pget_driver_config_str(hid_t fapl_id, char *config_buf,
                                       size_t buf_size) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_driver_config_str, ssize_t,
                        (fapl_id, config_buf, buf_size));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Pset_driver_by_name(hid_t plist_id, const char *driver_name,
                                   const char *driver_config) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_driver_by_name, herr_t,
                        (plist_id, driver_name, driver_config));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Pset_driver_by_value(hid_t plist_id,
                                    H5FD_class_value_t driver_value,
                                    const char *driver_config) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_driver_by_value, herr_t,
                        (plist_id, driver_value, driver_config));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Pget_vol_cap_flags(hid_t plist_id, uint64_t *cap_flags) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_vol_cap_flags, herr_t, (plist_id, cap_flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Pset_dataset_io_hyperslab_selection(
    hid_t plist_id, unsigned int rank, H5S_seloper_t op, const hsize_t start[],
    const hsize_t stride[], const hsize_t count[], const hsize_t block[]) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_dataset_io_hyperslab_selection, herr_t,
                        (plist_id, rank, op, start, stride, count, block));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Pset_selection_io(hid_t plist_id,
                                 H5D_selection_io_mode_t selection_io_mode) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_selection_io, herr_t,
                        (plist_id, selection_io_mode));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Pget_selection_io(hid_t plist_id,
                                 H5D_selection_io_mode_t *selection_io_mode) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_selection_io, herr_t,
                        (plist_id, selection_io_mode));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Pget_no_selection_io_cause(hid_t plist_id,
                                          uint32_t *no_selection_io_cause) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_no_selection_io_cause, herr_t,
                        (plist_id, no_selection_io_cause));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Pget_actual_selection_io_mode(
    hid_t plist_id, uint32_t *actual_selection_io_mode) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_actual_selection_io_mode, herr_t,
                        (plist_id, actual_selection_io_mode));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Pset_modify_write_buf(hid_t plist_id, hbool_t modify_write_buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_modify_write_buf, herr_t,
                        (plist_id, modify_write_buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Pget_modify_write_buf(hid_t plist_id,
                                     hbool_t *modify_write_buf) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_modify_write_buf, herr_t,
                        (plist_id, modify_write_buf));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5ESinsert_request(hid_t es_id, hid_t connector_id,
                                void *request) {
  BRAHMA_UNWRAPPED_FUNC(H5ESinsert_request, herr_t,
                        (es_id, connector_id, request));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5ESget_requests(hid_t es_id, H5_iter_order_t order,
                              hid_t *connector_ids, void **requests,
                              size_t array_len, size_t *count) {
  BRAHMA_UNWRAPPED_FUNC(
      H5ESget_requests, herr_t,
      (es_id, order, connector_ids, requests, array_len, count));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5FDperform_init(H5FD_init_t op) {
  BRAHMA_UNWRAPPED_FUNC(H5FDperform_init, hid_t, (op));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
htri_t HDF5::H5FDis_driver_registered_by_name(const char *driver_name) {
  BRAHMA_UNWRAPPED_FUNC(H5FDis_driver_registered_by_name, htri_t,
                        (driver_name));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
htri_t HDF5::H5FDis_driver_registered_by_value(
    H5FD_class_value_t driver_value) {
  BRAHMA_UNWRAPPED_FUNC(H5FDis_driver_registered_by_value, htri_t,
                        (driver_value));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5FDread_vector(H5FD_t *file, hid_t dxpl_id, uint32_t count,
                             H5FD_mem_t types[], haddr_t addrs[],
                             size_t sizes[], void *bufs[]) {
  BRAHMA_UNWRAPPED_FUNC(H5FDread_vector, herr_t,
                        (file, dxpl_id, count, types, addrs, sizes, bufs));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5FDwrite_vector(H5FD_t *file, hid_t dxpl_id, uint32_t count,
                              H5FD_mem_t types[], haddr_t addrs[],
                              size_t sizes[], const void *bufs[]) {
  BRAHMA_UNWRAPPED_FUNC(H5FDwrite_vector, herr_t,
                        (file, dxpl_id, count, types, addrs, sizes, bufs));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5FDread_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id,
                                uint32_t count, hid_t mem_spaces[],
                                hid_t file_spaces[], haddr_t offsets[],
                                size_t element_sizes[], void *bufs[]) {
  BRAHMA_UNWRAPPED_FUNC(H5FDread_selection, herr_t,
                        (file, type, dxpl_id, count, mem_spaces, file_spaces,
                         offsets, element_sizes, bufs));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5FDwrite_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id,
                                 uint32_t count, hid_t mem_spaces[],
                                 hid_t file_spaces[], haddr_t offsets[],
                                 size_t element_sizes[], const void *bufs[]) {
  BRAHMA_UNWRAPPED_FUNC(H5FDwrite_selection, herr_t,
                        (file, type, dxpl_id, count, mem_spaces, file_spaces,
                         offsets, element_sizes, bufs));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5FDread_vector_from_selection(
    H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count,
    hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[],
    size_t element_sizes[], void *bufs[]) {
  BRAHMA_UNWRAPPED_FUNC(H5FDread_vector_from_selection, herr_t,
                        (file, type, dxpl_id, count, mem_spaces, file_spaces,
                         offsets, element_sizes, bufs));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5FDwrite_vector_from_selection(
    H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count,
    hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[],
    size_t element_sizes[], const void *bufs[]) {
  BRAHMA_UNWRAPPED_FUNC(H5FDwrite_vector_from_selection, herr_t,
                        (file, type, dxpl_id, count, mem_spaces, file_spaces,
                         offsets, element_sizes, bufs));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5FDread_from_selection(H5FD_t *file, H5FD_mem_t type,
                                     hid_t dxpl_id, uint32_t count,
                                     hid_t mem_space_ids[],
                                     hid_t file_space_ids[], haddr_t offsets[],
                                     size_t element_sizes[], void *bufs[]) {
  BRAHMA_UNWRAPPED_FUNC(H5FDread_from_selection, herr_t,
                        (file, type, dxpl_id, count, mem_space_ids,
                         file_space_ids, offsets, element_sizes, bufs));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5FDwrite_from_selection(H5FD_t *file, H5FD_mem_t type,
                                      hid_t dxpl_id, uint32_t count,
                                      hid_t mem_space_ids[],
                                      hid_t file_space_ids[], haddr_t offsets[],
                                      size_t element_sizes[],
                                      const void *bufs[]) {
  BRAHMA_UNWRAPPED_FUNC(H5FDwrite_from_selection, herr_t,
                        (file, type, dxpl_id, count, mem_space_ids,
                         file_space_ids, offsets, element_sizes, bufs));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5FDdelete(const char *name, hid_t fapl_id) {
  BRAHMA_UNWRAPPED_FUNC(H5FDdelete, herr_t, (name, fapl_id));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5FDctl(H5FD_t *file, uint64_t op_code, uint64_t flags,
                     const void *input, void **output) {
  BRAHMA_UNWRAPPED_FUNC(H5FDctl, herr_t, (file, op_code, flags, input, output));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5Iregister_future(H5I_type_t type, const void *object,
                               H5I_future_realize_func_t realize_cb,
                               H5I_future_discard_func_t discard_cb) {
  BRAHMA_UNWRAPPED_FUNC(H5Iregister_future, hid_t,
                        (type, object, realize_cb, discard_cb));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5TSmutex_acquire(unsigned int lock_count, _Bool *acquired) {
  BRAHMA_UNWRAPPED_FUNC(H5TSmutex_acquire, herr_t, (lock_count, acquired));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5TSmutex_release(unsigned int *lock_count) {
  BRAHMA_UNWRAPPED_FUNC(H5TSmutex_release, herr_t, (lock_count));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5TSmutex_get_attempt_count(unsigned int *count) {
  BRAHMA_UNWRAPPED_FUNC(H5TSmutex_get_attempt_count, herr_t, (count));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLstart_lib_state(void) {
  BRAHMA_UNWRAPPED_FUNC(H5VLstart_lib_state, herr_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLfinish_lib_state(void) {
  BRAHMA_UNWRAPPED_FUNC(H5VLfinish_lib_state, herr_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLget_cap_flags(hid_t connector_id, uint64_t *cap_flags) {
  BRAHMA_UNWRAPPED_FUNC(H5VLget_cap_flags, herr_t, (connector_id, cap_flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLattr_get(void *obj, hid_t connector_id,
                          H5VL_attr_get_args_t *args, hid_t dxpl_id,
                          void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLattr_get, herr_t,
                        (obj, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLattr_specific(void *obj, const H5VL_loc_params_t *loc_params,
                               hid_t connector_id,
                               H5VL_attr_specific_args_t *args, hid_t dxpl_id,
                               void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLattr_specific, herr_t,
                        (obj, loc_params, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLattr_optional(void *obj, hid_t connector_id,
                               H5VL_optional_args_t *args, hid_t dxpl_id,
                               void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLattr_optional, herr_t,
                        (obj, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLdataset_read(size_t count, void *dset[], hid_t connector_id,
                              hid_t mem_type_id[], hid_t mem_space_id[],
                              hid_t file_space_id[], hid_t plist_id,
                              void *buf[], void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdataset_read, herr_t,
                        (count, dset, connector_id, mem_type_id, mem_space_id,
                         file_space_id, plist_id, buf, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLdataset_write(size_t count, void *dset[], hid_t connector_id,
                               hid_t mem_type_id[], hid_t mem_space_id[],
                               hid_t file_space_id[], hid_t plist_id,
                               const void *buf[], void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdataset_write, herr_t,
                        (count, dset, connector_id, mem_type_id, mem_space_id,
                         file_space_id, plist_id, buf, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLdataset_get(void *dset, hid_t connector_id,
                             H5VL_dataset_get_args_t *args, hid_t dxpl_id,
                             void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdataset_get, herr_t,
                        (dset, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLdataset_specific(void *obj, hid_t connector_id,
                                  H5VL_dataset_specific_args_t *args,
                                  hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdataset_specific, herr_t,
                        (obj, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLdataset_optional(void *obj, hid_t connector_id,
                                  H5VL_optional_args_t *args, hid_t dxpl_id,
                                  void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdataset_optional, herr_t,
                        (obj, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLdatatype_get(void *dt, hid_t connector_id,
                              H5VL_datatype_get_args_t *args, hid_t dxpl_id,
                              void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdatatype_get, herr_t,
                        (dt, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLdatatype_specific(void *obj, hid_t connector_id,
                                   H5VL_datatype_specific_args_t *args,
                                   hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdatatype_specific, herr_t,
                        (obj, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLdatatype_optional(void *obj, hid_t connector_id,
                                   H5VL_optional_args_t *args, hid_t dxpl_id,
                                   void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLdatatype_optional, herr_t,
                        (obj, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLfile_get(void *file, hid_t connector_id,
                          H5VL_file_get_args_t *args, hid_t dxpl_id,
                          void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLfile_get, herr_t,
                        (file, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLfile_specific(void *obj, hid_t connector_id,
                               H5VL_file_specific_args_t *args, hid_t dxpl_id,
                               void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLfile_specific, herr_t,
                        (obj, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLfile_optional(void *obj, hid_t connector_id,
                               H5VL_optional_args_t *args, hid_t dxpl_id,
                               void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLfile_optional, herr_t,
                        (obj, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLgroup_get(void *obj, hid_t connector_id,
                           H5VL_group_get_args_t *args, hid_t dxpl_id,
                           void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLgroup_get, herr_t,
                        (obj, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLgroup_specific(void *obj, hid_t connector_id,
                                H5VL_group_specific_args_t *args, hid_t dxpl_id,
                                void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLgroup_specific, herr_t,
                        (obj, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLgroup_optional(void *obj, hid_t connector_id,
                                H5VL_optional_args_t *args, hid_t dxpl_id,
                                void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLgroup_optional, herr_t,
                        (obj, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLlink_create(H5VL_link_create_args_t *args, void *obj,
                             const H5VL_loc_params_t *loc_params,
                             hid_t connector_id, hid_t lcpl_id, hid_t lapl_id,
                             hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(
      H5VLlink_create, herr_t,
      (args, obj, loc_params, connector_id, lcpl_id, lapl_id, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLlink_get(void *obj, const H5VL_loc_params_t *loc_params,
                          hid_t connector_id, H5VL_link_get_args_t *args,
                          hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLlink_get, herr_t,
                        (obj, loc_params, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLlink_specific(void *obj, const H5VL_loc_params_t *loc_params,
                               hid_t connector_id,
                               H5VL_link_specific_args_t *args, hid_t dxpl_id,
                               void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLlink_specific, herr_t,
                        (obj, loc_params, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLlink_optional(void *obj, const H5VL_loc_params_t *loc_params,
                               hid_t connector_id, H5VL_optional_args_t *args,
                               hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLlink_optional, herr_t,
                        (obj, loc_params, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLobject_get(void *obj, const H5VL_loc_params_t *loc_params,
                            hid_t connector_id, H5VL_object_get_args_t *args,
                            hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLobject_get, herr_t,
                        (obj, loc_params, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLobject_specific(void *obj, const H5VL_loc_params_t *loc_params,
                                 hid_t connector_id,
                                 H5VL_object_specific_args_t *args,
                                 hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLobject_specific, herr_t,
                        (obj, loc_params, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLobject_optional(void *obj, const H5VL_loc_params_t *loc_params,
                                 hid_t connector_id, H5VL_optional_args_t *args,
                                 hid_t dxpl_id, void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLobject_optional, herr_t,
                        (obj, loc_params, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLintrospect_get_cap_flags(const void *info, hid_t connector_id,
                                          uint64_t *cap_flags) {
  BRAHMA_UNWRAPPED_FUNC(H5VLintrospect_get_cap_flags, herr_t,
                        (info, connector_id, cap_flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLintrospect_opt_query(void *obj, hid_t connector_id,
                                      H5VL_subclass_t subcls, int opt_type,
                                      uint64_t *flags) {
  BRAHMA_UNWRAPPED_FUNC(H5VLintrospect_opt_query, herr_t,
                        (obj, connector_id, subcls, opt_type, flags));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLrequest_wait(void *req, hid_t connector_id, uint64_t timeout,
                              H5VL_request_status_t *status) {
  BRAHMA_UNWRAPPED_FUNC(H5VLrequest_wait, herr_t,
                        (req, connector_id, timeout, status));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLrequest_cancel(void *req, hid_t connector_id,
                                H5VL_request_status_t *status) {
  BRAHMA_UNWRAPPED_FUNC(H5VLrequest_cancel, herr_t,
                        (req, connector_id, status));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLrequest_specific(void *req, hid_t connector_id,
                                  H5VL_request_specific_args_t *args) {
  BRAHMA_UNWRAPPED_FUNC(H5VLrequest_specific, herr_t,
                        (req, connector_id, args));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLrequest_optional(void *req, hid_t connector_id,
                                  H5VL_optional_args_t *args) {
  BRAHMA_UNWRAPPED_FUNC(H5VLrequest_optional, herr_t,
                        (req, connector_id, args));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLblob_specific(void *obj, hid_t connector_id, void *blob_id,
                               H5VL_blob_specific_args_t *args) {
  BRAHMA_UNWRAPPED_FUNC(H5VLblob_specific, herr_t,
                        (obj, connector_id, blob_id, args));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLblob_optional(void *obj, hid_t connector_id, void *blob_id,
                               H5VL_optional_args_t *args) {
  BRAHMA_UNWRAPPED_FUNC(H5VLblob_optional, herr_t,
                        (obj, connector_id, blob_id, args));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5VLoptional(void *obj, hid_t connector_id,
                          H5VL_optional_args_t *args, hid_t dxpl_id,
                          void **req) {
  BRAHMA_UNWRAPPED_FUNC(H5VLoptional, herr_t,
                        (obj, connector_id, args, dxpl_id, req));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
hid_t HDF5::H5FD_onion_init(void) {
  BRAHMA_UNWRAPPED_FUNC(H5FD_onion_init, hid_t, ());
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Pget_fapl_onion(hid_t fapl_id, H5FD_onion_fapl_info_t *fa_out) {
  BRAHMA_UNWRAPPED_FUNC(H5Pget_fapl_onion, herr_t, (fapl_id, fa_out));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5Pset_fapl_onion(hid_t fapl_id,
                               const H5FD_onion_fapl_info_t *fa) {
  BRAHMA_UNWRAPPED_FUNC(H5Pset_fapl_onion, herr_t, (fapl_id, fa));
  return result;
}
#endif

#if BRAHMA_HDF5_VERSION >= 101400
herr_t HDF5::H5FDonion_get_revision_count(const char *filename, hid_t fapl_id,
                                          uint64_t *revision_count) {
  BRAHMA_UNWRAPPED_FUNC(H5FDonion_get_revision_count, herr_t,
                        (filename, fapl_id, revision_count));
  return result;
}
#endif

}  // namespace brahma

#endif  // BRAHMA_ENABLE_HDF5
