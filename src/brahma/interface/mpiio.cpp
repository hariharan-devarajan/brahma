
///
/// This file is generated by tools/generate_interfaces.py
/// Generated on: 2025-03-07 17:37:22
///

#include <brahma/interface/mpiio.h>

#include <stdexcept>
#ifdef BRAHMA_ENABLE_MPI

namespace brahma {
std::shared_ptr<MPIIO> MPIIO::my_instance = nullptr;

std::shared_ptr<MPIIO> MPIIO::get_instance() {
  if (my_instance == nullptr) {
    BRAHMA_LOG_INFO("MPIIO class not intercepted but used", "");
    my_instance = std::make_shared<MPIIO>();
  }
  return my_instance;
}

int MPIIO::set_instance(std::shared_ptr<MPIIO> instance_i) {
  if (instance_i != nullptr) {
    my_instance = instance_i;
    return 0;
  } else {
    BRAHMA_LOG_ERROR("%s instance_i is not set", "MPIIO");
    throw std::runtime_error("instance_i is not set");
  }
}

int MPIIO::MPI_File_call_errhandler(MPI_File fh, int errorcode) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_call_errhandler, int, (fh, errorcode));
  return result;
}

int MPIIO::MPI_File_create_errhandler(
    MPI_File_errhandler_function* file_errhandler_fn,
    MPI_Errhandler* errhandler) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_create_errhandler, int,
                        (file_errhandler_fn, errhandler));
  return result;
}

int MPIIO::MPI_File_get_errhandler(MPI_File file, MPI_Errhandler* errhandler) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_get_errhandler, int, (file, errhandler));
  return result;
}

int MPIIO::MPI_File_set_errhandler(MPI_File file, MPI_Errhandler errhandler) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_set_errhandler, int, (file, errhandler));
  return result;
}

int MPIIO::MPI_File_open(MPI_Comm comm, const char* filename, int amode,
                         MPI_Info info, MPI_File* fh) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_open, int, (comm, filename, amode, info, fh));
  return result;
}

int MPIIO::MPI_File_close(MPI_File* fh) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_close, int, (fh));
  return result;
}

int MPIIO::MPI_File_delete(const char* filename, MPI_Info info) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_delete, int, (filename, info));
  return result;
}

int MPIIO::MPI_File_set_size(MPI_File fh, MPI_Offset size) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_set_size, int, (fh, size));
  return result;
}

int MPIIO::MPI_File_preallocate(MPI_File fh, MPI_Offset size) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_preallocate, int, (fh, size));
  return result;
}

int MPIIO::MPI_File_get_size(MPI_File fh, MPI_Offset* size) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_get_size, int, (fh, size));
  return result;
}

int MPIIO::MPI_File_get_group(MPI_File fh, MPI_Group* group) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_get_group, int, (fh, group));
  return result;
}

int MPIIO::MPI_File_get_amode(MPI_File fh, int* amode) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_get_amode, int, (fh, amode));
  return result;
}

int MPIIO::MPI_File_set_info(MPI_File fh, MPI_Info info) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_set_info, int, (fh, info));
  return result;
}

int MPIIO::MPI_File_get_info(MPI_File fh, MPI_Info* info_used) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_get_info, int, (fh, info_used));
  return result;
}

int MPIIO::MPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype,
                             MPI_Datatype filetype, const char* datarep,
                             MPI_Info info) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_set_view, int,
                        (fh, disp, etype, filetype, datarep, info));
  return result;
}

int MPIIO::MPI_File_get_view(MPI_File fh, MPI_Offset* disp, MPI_Datatype* etype,
                             MPI_Datatype* filetype, char* datarep) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_get_view, int,
                        (fh, disp, etype, filetype, datarep));
  return result;
}

int MPIIO::MPI_File_read_at(MPI_File fh, MPI_Offset offset, void* buf,
                            int count, MPI_Datatype datatype,
                            MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_at, int,
                        (fh, offset, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_read_at_all(MPI_File fh, MPI_Offset offset, void* buf,
                                int count, MPI_Datatype datatype,
                                MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_at_all, int,
                        (fh, offset, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_write_at(MPI_File fh, MPI_Offset offset, const void* buf,
                             int count, MPI_Datatype datatype,
                             MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_at, int,
                        (fh, offset, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_write_at_all(MPI_File fh, MPI_Offset offset,
                                 const void* buf, int count,
                                 MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_at_all, int,
                        (fh, offset, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_iread_at(MPI_File fh, MPI_Offset offset, void* buf,
                             int count, MPI_Datatype datatype,
                             MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iread_at, int,
                        (fh, offset, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, const void* buf,
                              int count, MPI_Datatype datatype,
                              MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iwrite_at, int,
                        (fh, offset, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_read(MPI_File fh, void* buf, int count,
                         MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read, int, (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_read_all(MPI_File fh, void* buf, int count,
                             MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_all, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_write(MPI_File fh, const void* buf, int count,
                          MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_write_all(MPI_File fh, const void* buf, int count,
                              MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_all, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_iread(MPI_File fh, void* buf, int count,
                          MPI_Datatype datatype, MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iread, int,
                        (fh, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iwrite(MPI_File fh, const void* buf, int count,
                           MPI_Datatype datatype, MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iwrite, int,
                        (fh, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_seek(MPI_File fh, MPI_Offset offset, int whence) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_seek, int, (fh, offset, whence));
  return result;
}

int MPIIO::MPI_File_get_position(MPI_File fh, MPI_Offset* offset) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_get_position, int, (fh, offset));
  return result;
}

int MPIIO::MPI_File_get_byte_offset(MPI_File fh, MPI_Offset offset,
                                    MPI_Offset* disp) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_get_byte_offset, int, (fh, offset, disp));
  return result;
}

int MPIIO::MPI_File_read_shared(MPI_File fh, void* buf, int count,
                                MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_shared, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_write_shared(MPI_File fh, const void* buf, int count,
                                 MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_shared, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_iread_shared(MPI_File fh, void* buf, int count,
                                 MPI_Datatype datatype, MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iread_shared, int,
                        (fh, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iwrite_shared(MPI_File fh, const void* buf, int count,
                                  MPI_Datatype datatype, MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iwrite_shared, int,
                        (fh, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_read_ordered(MPI_File fh, void* buf, int count,
                                 MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_ordered, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_write_ordered(MPI_File fh, const void* buf, int count,
                                  MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_ordered, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_seek_shared(MPI_File fh, MPI_Offset offset, int whence) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_seek_shared, int, (fh, offset, whence));
  return result;
}

int MPIIO::MPI_File_get_position_shared(MPI_File fh, MPI_Offset* offset) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_get_position_shared, int, (fh, offset));
  return result;
}

int MPIIO::MPI_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, void* buf,
                                      int count, MPI_Datatype datatype) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_at_all_begin, int,
                        (fh, offset, buf, count, datatype));
  return result;
}

int MPIIO::MPI_File_read_at_all_end(MPI_File fh, void* buf,
                                    MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_at_all_end, int, (fh, buf, status));
  return result;
}

int MPIIO::MPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset,
                                       const void* buf, int count,
                                       MPI_Datatype datatype) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_at_all_begin, int,
                        (fh, offset, buf, count, datatype));
  return result;
}

int MPIIO::MPI_File_write_at_all_end(MPI_File fh, const void* buf,
                                     MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_at_all_end, int, (fh, buf, status));
  return result;
}

int MPIIO::MPI_File_read_all_begin(MPI_File fh, void* buf, int count,
                                   MPI_Datatype datatype) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_all_begin, int,
                        (fh, buf, count, datatype));
  return result;
}

int MPIIO::MPI_File_read_all_end(MPI_File fh, void* buf, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_all_end, int, (fh, buf, status));
  return result;
}

int MPIIO::MPI_File_write_all_begin(MPI_File fh, const void* buf, int count,
                                    MPI_Datatype datatype) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_all_begin, int,
                        (fh, buf, count, datatype));
  return result;
}

int MPIIO::MPI_File_write_all_end(MPI_File fh, const void* buf,
                                  MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_all_end, int, (fh, buf, status));
  return result;
}

int MPIIO::MPI_File_read_ordered_begin(MPI_File fh, void* buf, int count,
                                       MPI_Datatype datatype) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_ordered_begin, int,
                        (fh, buf, count, datatype));
  return result;
}

int MPIIO::MPI_File_read_ordered_end(MPI_File fh, void* buf,
                                     MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_ordered_end, int, (fh, buf, status));
  return result;
}

int MPIIO::MPI_File_write_ordered_begin(MPI_File fh, const void* buf, int count,
                                        MPI_Datatype datatype) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_ordered_begin, int,
                        (fh, buf, count, datatype));
  return result;
}

int MPIIO::MPI_File_write_ordered_end(MPI_File fh, const void* buf,
                                      MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_ordered_end, int, (fh, buf, status));
  return result;
}

int MPIIO::MPI_File_get_type_extent(MPI_File fh, MPI_Datatype datatype,
                                    MPI_Aint* extent) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_get_type_extent, int, (fh, datatype, extent));
  return result;
}

int MPIIO::MPI_File_set_atomicity(MPI_File fh, int flag) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_set_atomicity, int, (fh, flag));
  return result;
}

int MPIIO::MPI_File_get_atomicity(MPI_File fh, int* flag) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_get_atomicity, int, (fh, flag));
  return result;
}

int MPIIO::MPI_File_sync(MPI_File fh) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_sync, int, (fh));
  return result;
}

int MPIIO::MPI_File_iread_at_all(MPI_File fh, MPI_Offset offset, void* buf,
                                 int count, MPI_Datatype datatype,
                                 MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iread_at_all, int,
                        (fh, offset, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iwrite_at_all(MPI_File fh, MPI_Offset offset,
                                  const void* buf, int count,
                                  MPI_Datatype datatype, MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iwrite_at_all, int,
                        (fh, offset, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iread_all(MPI_File fh, void* buf, int count,
                              MPI_Datatype datatype, MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iread_all, int,
                        (fh, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iwrite_all(MPI_File fh, const void* buf, int count,
                               MPI_Datatype datatype, MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iwrite_all, int,
                        (fh, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_read_c(MPI_File fh, void* buf, MPI_Count count,
                           MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_c, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_read_all_c(MPI_File fh, void* buf, MPI_Count count,
                               MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_all_c, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_read_all_begin_c(MPI_File fh, void* buf, MPI_Count count,
                                     MPI_Datatype datatype) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_all_begin_c, int,
                        (fh, buf, count, datatype));
  return result;
}

int MPIIO::MPI_File_read_at_c(MPI_File fh, MPI_Offset offset, void* buf,
                              MPI_Count count, MPI_Datatype datatype,
                              MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_at_c, int,
                        (fh, offset, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_read_at_all_c(MPI_File fh, MPI_Offset offset, void* buf,
                                  MPI_Count count, MPI_Datatype datatype,
                                  MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_at_all_c, int,
                        (fh, offset, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_read_at_all_begin_c(MPI_File fh, MPI_Offset offset,
                                        void* buf, MPI_Count count,
                                        MPI_Datatype datatype) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_at_all_begin_c, int,
                        (fh, offset, buf, count, datatype));
  return result;
}

int MPIIO::MPI_File_read_ordered_c(MPI_File fh, void* buf, MPI_Count count,
                                   MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_ordered_c, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_read_ordered_begin_c(MPI_File fh, void* buf,
                                         MPI_Count count,
                                         MPI_Datatype datatype) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_ordered_begin_c, int,
                        (fh, buf, count, datatype));
  return result;
}

int MPIIO::MPI_File_read_shared_c(MPI_File fh, void* buf, MPI_Count count,
                                  MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_read_shared_c, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_write_c(MPI_File fh, const void* buf, MPI_Count count,
                            MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_c, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_write_all_c(MPI_File fh, const void* buf, MPI_Count count,
                                MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_all_c, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_write_all_begin_c(MPI_File fh, const void* buf,
                                      MPI_Count count, MPI_Datatype datatype) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_all_begin_c, int,
                        (fh, buf, count, datatype));
  return result;
}

int MPIIO::MPI_File_write_at_c(MPI_File fh, MPI_Offset offset, const void* buf,
                               MPI_Count count, MPI_Datatype datatype,
                               MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_at_c, int,
                        (fh, offset, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_write_at_all_c(MPI_File fh, MPI_Offset offset,
                                   const void* buf, MPI_Count count,
                                   MPI_Datatype datatype, MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_at_all_c, int,
                        (fh, offset, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_write_at_all_begin_c(MPI_File fh, MPI_Offset offset,
                                         const void* buf, MPI_Count count,
                                         MPI_Datatype datatype) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_at_all_begin_c, int,
                        (fh, offset, buf, count, datatype));
  return result;
}

int MPIIO::MPI_File_write_ordered_c(MPI_File fh, const void* buf,
                                    MPI_Count count, MPI_Datatype datatype,
                                    MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_ordered_c, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_write_ordered_begin_c(MPI_File fh, const void* buf,
                                          MPI_Count count,
                                          MPI_Datatype datatype) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_ordered_begin_c, int,
                        (fh, buf, count, datatype));
  return result;
}

int MPIIO::MPI_File_write_shared_c(MPI_File fh, const void* buf,
                                   MPI_Count count, MPI_Datatype datatype,
                                   MPI_Status* status) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_write_shared_c, int,
                        (fh, buf, count, datatype, status));
  return result;
}

int MPIIO::MPI_File_iread_c(MPI_File fh, void* buf, MPI_Count count,
                            MPI_Datatype datatype, MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iread_c, int,
                        (fh, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iread_all_c(MPI_File fh, void* buf, MPI_Count count,
                                MPI_Datatype datatype, MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iread_all_c, int,
                        (fh, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iread_at_c(MPI_File fh, MPI_Offset offset, void* buf,
                               MPI_Count count, MPI_Datatype datatype,
                               MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iread_at_c, int,
                        (fh, offset, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iread_at_all_c(MPI_File fh, MPI_Offset offset, void* buf,
                                   MPI_Count count, MPI_Datatype datatype,
                                   MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iread_at_all_c, int,
                        (fh, offset, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iread_shared_c(MPI_File fh, void* buf, MPI_Count count,
                                   MPI_Datatype datatype,
                                   MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iread_shared_c, int,
                        (fh, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iwrite_c(MPI_File fh, const void* buf, MPI_Count count,
                             MPI_Datatype datatype, MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iwrite_c, int,
                        (fh, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iwrite_all_c(MPI_File fh, const void* buf, MPI_Count count,
                                 MPI_Datatype datatype, MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iwrite_all_c, int,
                        (fh, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iwrite_at_c(MPI_File fh, MPI_Offset offset, const void* buf,
                                MPI_Count count, MPI_Datatype datatype,
                                MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iwrite_at_c, int,
                        (fh, offset, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iwrite_at_all_c(MPI_File fh, MPI_Offset offset,
                                    const void* buf, MPI_Count count,
                                    MPI_Datatype datatype,
                                    MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iwrite_at_all_c, int,
                        (fh, offset, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_iwrite_shared_c(MPI_File fh, const void* buf,
                                    MPI_Count count, MPI_Datatype datatype,
                                    MPI_Request* request) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_iwrite_shared_c, int,
                        (fh, buf, count, datatype, request));
  return result;
}

int MPIIO::MPI_File_get_type_extent_c(MPI_File fh, MPI_Datatype datatype,
                                      MPI_Count* extent) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_get_type_extent_c, int,
                        (fh, datatype, extent));
  return result;
}

MPI_File MPIIO::MPI_File_f2c(MPI_Fint file) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_f2c, MPI_File, (file));
  return result;
}

MPI_Fint MPIIO::MPI_File_c2f(MPI_File file) {
  BRAHMA_UNWRAPPED_FUNC(MPI_File_c2f, MPI_Fint, (file));
  return result;
}

}  // namespace brahma

#endif  // BRAHMA_ENABLE_MPI
