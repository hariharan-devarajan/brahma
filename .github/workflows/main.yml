# This is a basic workflow to help you get started with Actions

name: cmake

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: 
  pull_request:
    branches: [ main, dev ]
  push:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  LOCAL: local

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        MPI: ["ON", "OFF"]
    env:
      MPI: ${{ matrix.MPI }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Push checkout
        if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: PR checkout
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2
      - name: Install additional packages
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends  \
                              gcc g++ gfortran \
                              cmake \
                              autoconf \
                              automake \
                              libtool \
                              libtool-bin \
                              openmpi-bin \
                              libopenmpi-dev \
                              libarchive-dev \
                              ncurses-bin \
                              hwloc \
                              lua5.3 liblua5.3-dev \
                              python3.10 \
                              python3-pip \
                              python3-venv \
                              libczmq-dev \
                              lua-posix-dev \
                              lz4 \
                              pkgconf \
                              libzmq5 \
                              sqlite
      - name: Install Dependencies
        run: |
          mkdir build
          cd build
          cmake -DBRAHMA_BUILD_WITH_MPI=${MPI} -DBRAHMA_ENABLE_TESTING=ON -DBRAHMA_BUILD_DEPENDENCIES=ON ..
          make -j
      - name: Build
        run: |
          mkdir build
          cd build
          cmake -DBRAHMA_BUILD_WITH_MPI=${MPI} -DBRAHMA_ENABLE_TESTING=ON -DBRAHMA_BUILD_DEPENDENCIES=OFF ..
          make -j
      - name: Test
        run: |
          cd build
          ctest -VV
